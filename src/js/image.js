(function() {
  var ImageSize,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ImageSize = (function(superClass) {
    extend(ImageSize, superClass);

    function ImageSize(el, callback) {
      ImageSize.__super__.constructor.call(this);
      this.init(el);
      this.bind();
      this.render(callback);
      return this;
    }

    ImageSize.prototype.toString = function() {
      return 'ImageSize';
    };

    ImageSize.prototype.init = function(el) {
      this.el = $(el)[0];
      this.debug = true;
      this.complete = this.el.complete;
      this.data = {};
      this._timer = null;
      this.data.width = this.el.width;
      return this.data.height = this.el.height;
    };

    ImageSize.prototype.bind = function() {
      return $(window).resize((function(_this) {
        return function(e) {
          var isEqual;
          isEqual = _this.el.width === _this.data.width && _this.el.height === _this.data.height;
          if (isEqual) {
            return;
          }
          _this.log('bind() is executed');
          $.extend(_this.data, {
            width: _this.el.width,
            height: _this.el.height,
            widthRatio: _this.el.width / _this.data.naturalWidth,
            heightRatio: _this.el.height / _this.data.naturalHeight
          });
          return _this.emit('change', [_this.data]);
        };
      })(this));
    };

    ImageSize.prototype.render = function(callback) {
      var img;
      this.log('render() is executed');
      if (this.complete) {
        img = new Image();
        img.src = this.el.src;
        this.log("Image '" + this.el.src + "' is loaded");
        this.data.naturalWidth = img.width;
        this.data.naturalHeight = img.height;
        return callback(true, this.data);
      } else {
        this.log("Image '" + this.el.src + "' is NOT ready");
        img = new Image();
        img.src = this.el.src;
        img.onload = (function(_this) {
          return function(e) {
            _this.log("Image '" + img.src + "' is loaded");
            _this.data.naturalWidth = img.width;
            _this.data.naturalHeight = img.height;
            return callback(true, _this.data);
          };
        })(this);
        return img.onerror = (function(_this) {
          return function(e) {
            _this.log("Image '" + img.src + "' is failed to load");
            return callback(false, _this.data);
          };
        })(this);
      }
    };

    return ImageSize;

  })(Stackla.Base);

  if (!window.Stackla) {
    window.Stackla = {};
  }

  Stackla.getImageSize = function(el, callback) {
    return new ImageSize(el, callback);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,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LENBQUMsT0FBSixHQUFjLENBQUEsU0FBQSxLQUFBLEdBQUE7aUJBQUEsU0FBQyxDQUFELEdBQUE7QUFDWixZQUFBLEtBQUMsQ0FBQSxHQUFELENBQUssU0FBQSxHQUFVLEdBQUcsQ0FBQyxHQUFkLEdBQWtCLHFCQUF2QixDQUFBLENBQUE7bUJBQ0EsUUFBQSxDQUFTLEtBQVQsRUFBZ0IsS0FBQyxDQUFBLElBQWpCLEVBRlk7VUFBQSxFQUFBO1FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxFQWpCaEI7T0FITTtJQUFBLENBaENSLENBQUE7O3FCQUFBOztLQUZzQixPQUFPLENBQUMsS0FBaEMsQ0FBQTs7QUEyREEsRUFBQSxJQUFBLENBQUEsTUFBaUMsQ0FBQyxPQUFsQztBQUFBLElBQUEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsRUFBakIsQ0FBQTtHQTNEQTs7QUFBQSxFQTZEQSxPQUFPLENBQUMsWUFBUixHQUF1QixTQUFDLEVBQUQsRUFBSyxRQUFMLEdBQUE7V0FDakIsSUFBQSxTQUFBLENBQVUsRUFBVixFQUFjLFFBQWQsRUFEaUI7RUFBQSxDQTdEdkIsQ0FBQTtBQUFBIiwiZmlsZSI6ImltYWdlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgSW1hZ2VTaXplIGV4dGVuZHMgU3RhY2tsYS5CYXNlXG5cbiAgY29uc3RydWN0b3I6IChlbCwgY2FsbGJhY2spIC0+XG4gICAgc3VwZXIoKVxuICAgIEBpbml0KGVsKVxuICAgIEBiaW5kKClcbiAgICBAcmVuZGVyKGNhbGxiYWNrKVxuICAgIHJldHVybiBAXG5cbiAgdG9TdHJpbmc6ICgpIC0+ICdJbWFnZVNpemUnXG5cbiAgaW5pdDogKGVsKSAtPlxuICAgIEBlbCA9ICQoZWwpWzBdXG4gICAgQGRlYnVnID0gb25cbiAgICBAY29tcGxldGUgPSBAZWwuY29tcGxldGVcbiAgICBAZGF0YSA9IHt9XG4gICAgQF90aW1lciA9IG51bGxcbiAgICBAZGF0YS53aWR0aCA9IEBlbC53aWR0aFxuICAgIEBkYXRhLmhlaWdodCA9IEBlbC5oZWlnaHRcblxuICBiaW5kOiAtPlxuICAgICMgS2VlcCBhbiBleWUgb24gcmVzaXplIGV2ZW50XG4gICAgJCh3aW5kb3cpLnJlc2l6ZSAoZSkgPT5cbiAgICAgIGlzRXF1YWwgPSBAZWwud2lkdGggaXMgQGRhdGEud2lkdGggYW5kIEBlbC5oZWlnaHQgaXMgQGRhdGEuaGVpZ2h0XG4gICAgICByZXR1cm4gaWYgaXNFcXVhbFxuICAgICAgQGxvZyAnYmluZCgpIGlzIGV4ZWN1dGVkJ1xuICAgICAgJC5leHRlbmQgQGRhdGEsIHtcbiAgICAgICAgd2lkdGg6IEBlbC53aWR0aFxuICAgICAgICBoZWlnaHQ6IEBlbC5oZWlnaHRcbiAgICAgICAgd2lkdGhSYXRpbzogQGVsLndpZHRoIC8gQGRhdGEubmF0dXJhbFdpZHRoXG4gICAgICAgIGhlaWdodFJhdGlvOiBAZWwuaGVpZ2h0IC8gQGRhdGEubmF0dXJhbEhlaWdodFxuICAgICAgfVxuICAgICAgQC5lbWl0KCdjaGFuZ2UnLCBbQGRhdGFdKVxuXG4gIHJlbmRlcjogKGNhbGxiYWNrKSAtPlxuICAgIEBsb2cgJ3JlbmRlcigpIGlzIGV4ZWN1dGVkJ1xuICAgICMgSW1hZ2UgTG9hZGVkXG4gICAgaWYgQGNvbXBsZXRlXG4gICAgICBpbWcgPSBuZXcgSW1hZ2UoKVxuICAgICAgaW1nLnNyYyA9IEBlbC5zcmNcbiAgICAgIEBsb2cgXCJJbWFnZSAnI3tAZWwuc3JjfScgaXMgbG9hZGVkXCJcbiAgICAgIEBkYXRhLm5hdHVyYWxXaWR0aCA9IGltZy53aWR0aFxuICAgICAgQGRhdGEubmF0dXJhbEhlaWdodCA9IGltZy5oZWlnaHRcbiAgICAgIGNhbGxiYWNrKHRydWUsIEBkYXRhKVxuICAgICMgSW1hZ2UgTG9hZGluZ1xuICAgIGVsc2VcbiAgICAgIEBsb2cgXCJJbWFnZSAnI3tAZWwuc3JjfScgaXMgTk9UIHJlYWR5XCJcbiAgICAgIGltZyA9IG5ldyBJbWFnZSgpXG4gICAgICBpbWcuc3JjID0gQGVsLnNyY1xuICAgICAgaW1nLm9ubG9hZCA9IChlKSA9PlxuICAgICAgICBAbG9nIFwiSW1hZ2UgJyN7aW1nLnNyY30nIGlzIGxvYWRlZFwiXG4gICAgICAgIEBkYXRhLm5hdHVyYWxXaWR0aCA9IGltZy53aWR0aFxuICAgICAgICBAZGF0YS5uYXR1cmFsSGVpZ2h0ID0gaW1nLmhlaWdodFxuICAgICAgICBjYWxsYmFjayh0cnVlLCBAZGF0YSlcbiAgICAgIGltZy5vbmVycm9yID0gKGUpID0+XG4gICAgICAgIEBsb2cgXCJJbWFnZSAnI3tpbWcuc3JjfScgaXMgZmFpbGVkIHRvIGxvYWRcIlxuICAgICAgICBjYWxsYmFjayhmYWxzZSwgQGRhdGEpXG5cblxud2luZG93LlN0YWNrbGEgPSB7fSB1bmxlc3Mgd2luZG93LlN0YWNrbGFcblxuU3RhY2tsYS5nZXRJbWFnZVNpemUgPSAoZWwsIGNhbGxiYWNrKSAtPlxuICBuZXcgSW1hZ2VTaXplKGVsLCBjYWxsYmFjaylcbiJdfQ==