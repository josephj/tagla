(function() {
  var ImageSize,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  ImageSize = (function(_super) {
    __extends(ImageSize, _super);

    function ImageSize(el, callback) {
      var img;
      ImageSize.__super__.constructor.call(this);
      this.el = $(el)[0];
      this.debug = true;
      this.complete = this.el.complete;
      this.data = {
        width: this.el.width,
        height: this.el.height,
        naturalWidth: null,
        naturalHeight: null
      };
      this._timer = null;
      if (this.complete) {
        this.log("Image '" + this.el.src + "' is ready");
        img = new Image();
        img.src = this.el.src;
        $.extend(this.data, {
          naturalWidth: img.width,
          naturalHeight: img.height
        });
        callback(true, this.data);
      } else {
        this.log("Image '" + this.el.src + "' is NOT ready");
        img = new Image();
        img.src = this.el.src;
        img.onload = (function(_this) {
          return function(e) {
            _this.log("Image '" + img.src + "' is loaded");
            $.extend(_this.data, {
              naturalWidth: img.width,
              naturalHeight: img.height
            });
            return callback(true, _this.data);
          };
        })(this);
        img.onerror = (function(_this) {
          return function(e) {
            _this.log("Image '" + img.src + "' is failed to load");
            return callback(false, _this.data);
          };
        })(this);
      }
      $(window).resize((function(_this) {
        return function(e) {
          if (_this._timer) {
            window.clearTimeout(_this._timer);
          }
          return _this._timer = window.setTimeout(function() {
            var isEqual;
            isEqual = _this.el.width === _this.data.width && _this.el.height === _this.data.height;
            if (isEqual) {
              return;
            }
            $.extend(_this.data, {
              width: _this.el.width,
              height: _this.el.height,
              widthRatio: _this.el.width / _this.data.naturalWidth,
              heightRatio: _this.el.height / _this.data.naturalHeight
            });
            _this.emit('change', [_this.data]);
            return _this._timer = null;
          }, 100);
        };
      })(this));
      return this;
    }

    ImageSize.prototype.toString = function() {
      return 'ImageSize';
    };

    return ImageSize;

  })(Stackla.Base);

  if (!window.Stackla) {
    window.Stackla = {};
  }

  Stackla.getImageSize = function(el, callback) {
    return new ImageSize(el, callback);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,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Q0FBbEIsRUFXUixHQVhRLEVBRks7UUFBQSxFQUFBO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFqQixDQS9CQSxDQUFBO0FBNkNBLGFBQU8sSUFBUCxDQTlDVztJQUFBLENBQWI7O0FBQUEsd0JBK0NBLFFBQUEsR0FBVSxTQUFBLEdBQUE7YUFBTyxZQUFQO0lBQUEsQ0EvQ1YsQ0FBQTs7cUJBQUE7O0tBRHNCLE9BQU8sQ0FBQyxLQUFoQyxDQUFBOztBQWtEQSxFQUFBLElBQUEsQ0FBQSxNQUFpQyxDQUFDLE9BQWxDO0FBQUEsSUFBQSxNQUFNLENBQUMsT0FBUCxHQUFpQixFQUFqQixDQUFBO0dBbERBOztBQUFBLEVBbURBLE9BQU8sQ0FBQyxZQUFSLEdBQXVCLFNBQUMsRUFBRCxFQUFLLFFBQUwsR0FBQTtXQUFzQixJQUFBLFNBQUEsQ0FBVSxFQUFWLEVBQWMsUUFBZCxFQUF0QjtFQUFBLENBbkR2QixDQUFBO0FBQUEiLCJmaWxlIjoiaW1hZ2UuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBJbWFnZVNpemUgZXh0ZW5kcyBTdGFja2xhLkJhc2VcbiAgY29uc3RydWN0b3I6IChlbCwgY2FsbGJhY2spIC0+XG4gICAgc3VwZXIoKVxuICAgIEBlbCA9ICQoZWwpWzBdXG4gICAgQGRlYnVnID0gb25cbiAgICBAY29tcGxldGUgPSBAZWwuY29tcGxldGVcbiAgICBAZGF0YSA9XG4gICAgICB3aWR0aDogQGVsLndpZHRoXG4gICAgICBoZWlnaHQ6IEBlbC5oZWlnaHRcbiAgICAgIG5hdHVyYWxXaWR0aDogbnVsbFxuICAgICAgbmF0dXJhbEhlaWdodDogbnVsbFxuICAgIEBfdGltZXIgPSBudWxsXG4gICAgIyBJbWFnZSBMb2FkZWRcbiAgICBpZiBAY29tcGxldGVcbiAgICAgIEBsb2cgXCJJbWFnZSAnI3tAZWwuc3JjfScgaXMgcmVhZHlcIlxuICAgICAgaW1nID0gbmV3IEltYWdlKClcbiAgICAgIGltZy5zcmMgPSBAZWwuc3JjXG4gICAgICAkLmV4dGVuZCBAZGF0YSwge25hdHVyYWxXaWR0aDogaW1nLndpZHRoLCBuYXR1cmFsSGVpZ2h0OiBpbWcuaGVpZ2h0fVxuICAgICAgY2FsbGJhY2sodHJ1ZSwgQGRhdGEpXG4gICAgIyBJbWFnZSBMb2FkaW5nXG4gICAgZWxzZVxuICAgICAgQGxvZyBcIkltYWdlICcje0BlbC5zcmN9JyBpcyBOT1QgcmVhZHlcIlxuICAgICAgaW1nID0gbmV3IEltYWdlKClcbiAgICAgIGltZy5zcmMgPSBAZWwuc3JjXG4gICAgICBpbWcub25sb2FkID0gKGUpID0+XG4gICAgICAgIEBsb2cgXCJJbWFnZSAnI3tpbWcuc3JjfScgaXMgbG9hZGVkXCJcbiAgICAgICAgJC5leHRlbmQgQGRhdGEsIHtuYXR1cmFsV2lkdGg6IGltZy53aWR0aCwgbmF0dXJhbEhlaWdodDogaW1nLmhlaWdodH1cbiAgICAgICAgY2FsbGJhY2sodHJ1ZSwgQGRhdGEpXG4gICAgICBpbWcub25lcnJvciA9IChlKSA9PlxuICAgICAgICBAbG9nIFwiSW1hZ2UgJyN7aW1nLnNyY30nIGlzIGZhaWxlZCB0byBsb2FkXCJcbiAgICAgICAgY2FsbGJhY2soZmFsc2UsIEBkYXRhKVxuXG4gICAgIyBLZWVwIGFuIGV5ZSBvbiByZXNpemUgZXZlbnRcbiAgICAkKHdpbmRvdykucmVzaXplIChlKSA9PlxuICAgICAgd2luZG93LmNsZWFyVGltZW91dChAX3RpbWVyKSBpZiBAX3RpbWVyXG4gICAgICBAX3RpbWVyID0gd2luZG93LnNldFRpbWVvdXQgPT5cbiAgICAgICAgaXNFcXVhbCA9IEBlbC53aWR0aCBpcyBAZGF0YS53aWR0aCBhbmQgQGVsLmhlaWdodCBpcyBAZGF0YS5oZWlnaHRcbiAgICAgICAgcmV0dXJuIGlmIGlzRXF1YWxcbiAgICAgICAgJC5leHRlbmQgQGRhdGEsIHtcbiAgICAgICAgICB3aWR0aDogQGVsLndpZHRoXG4gICAgICAgICAgaGVpZ2h0OiBAZWwuaGVpZ2h0XG4gICAgICAgICAgd2lkdGhSYXRpbzogQGVsLndpZHRoIC8gQGRhdGEubmF0dXJhbFdpZHRoXG4gICAgICAgICAgaGVpZ2h0UmF0aW86IEBlbC5oZWlnaHQgLyBAZGF0YS5uYXR1cmFsSGVpZ2h0XG4gICAgICAgIH1cbiAgICAgICAgQC5lbWl0KCdjaGFuZ2UnLCBbQGRhdGFdKVxuICAgICAgICBAX3RpbWVyID0gbnVsbFxuICAgICAgLCAxMDBcbiAgICByZXR1cm4gQFxuICB0b1N0cmluZzogKCkgLT4gJ0ltYWdlU2l6ZSdcblxud2luZG93LlN0YWNrbGEgPSB7fSB1bmxlc3Mgd2luZG93LlN0YWNrbGFcblN0YWNrbGEuZ2V0SW1hZ2VTaXplID0gKGVsLCBjYWxsYmFjaykgLT4gbmV3IEltYWdlU2l6ZShlbCwgY2FsbGJhY2spXG4iXX0=