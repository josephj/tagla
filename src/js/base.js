
/*
 * @class Stackla.Base
 */

(function() {
  var Base;

  Base = (function() {
    function Base(options) {
      var attrs, debug;
      if (options == null) {
        options = {};
      }
      debug = this.getParams('debug');
      attrs = attrs || {};
      if (debug) {
        this.debug = debug === 'true' || debug === '1';
      } else if (attrs.debug) {
        this.debug = attrs.debug === true;
      } else {
        this.debug = false;
      }
      this._listeners = [];
    }

    Base.prototype.toString = function() {
      return 'Base';
    };

    Base.prototype.log = function(msg, type) {
      if (!this.debug) {
        return;
      }
      type = type || 'info';
      if (window.console && window.console[type]) {
        window.console[type]("[" + (this.toString()) + "] " + msg);
      }
    };

    Base.prototype.on = function(type, callback) {
      if (!type || !callback) {
        throw new Error('Both event type and callback are required parameters');
      }
      this.log('on() - event \'' + type + '\' is subscribed');
      if (!this._listeners[type]) {
        this._listeners[type] = [];
      }
      callback.instance = this;
      this._listeners[type].push(callback);
      return callback;
    };

    Base.prototype.emit = function(type, data) {
      var i;
      if (data == null) {
        data = [];
      }
      this.log("emit() - event '" + type + "' is triggered");
      data.unshift({
        type: type,
        target: this
      });
      if (!type) {
        throw new Error('Lacks of type parameter');
      }
      if (this._listeners[type] && this._listeners[type].length) {
        for (i in this._listeners[type]) {
          this._listeners[type][i].apply(this, data);
        }
      }
      return this;
    };

    Base.prototype.getParams = function(key) {
      var hash, hashes, href, i, params, pos;
      href = this.getUrl();
      params = {};
      pos = href.indexOf('?');
      this.log('getParams() is executed');
      if (href.indexOf('#') !== -1) {
        hashes = href.slice(pos + 1, href.indexOf('#')).split('&');
      } else {
        hashes = href.slice(pos + 1).split('&');
      }
      for (i in hashes) {
        hash = hashes[i].split('=');
        params[hash[0]] = hash[1];
      }
      if (key) {
        return params[key];
      } else {
        return params;
      }
    };

    Base.prototype.getUrl = function() {
      return window.location.href;
    };

    return Base;

  })();

  if (!window.Stackla) {
    window.Stackla = {};
  }

  window.Stackla.Base = Base;

}).call(this);

//# sourceMappingURL=data:application/json;base64,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Q0FERjtBQUFBLE9BUkE7QUFXQSxNQUFBLElBQUcsR0FBSDtlQUFZLE1BQU8sQ0FBQSxHQUFBLEVBQW5CO09BQUEsTUFBQTtlQUE2QixPQUE3QjtPQVpTO0lBQUEsQ0F4Q1gsQ0FBQTs7QUFBQSxtQkFzREEsTUFBQSxHQUFRLFNBQUEsR0FBQTthQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBbkI7SUFBQSxDQXREUixDQUFBOztnQkFBQTs7TUFMRixDQUFBOztBQThEQSxFQUFBLElBQUEsQ0FBQSxNQUFpQyxDQUFDLE9BQWxDO0FBQUEsSUFBQSxNQUFNLENBQUMsT0FBUCxHQUFpQixFQUFqQixDQUFBO0dBOURBOztBQUFBLEVBK0RBLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBZixHQUFzQixJQS9EdEIsQ0FBQTtBQUFBIiwiZmlsZSI6ImJhc2UuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbiMgQGNsYXNzIFN0YWNrbGEuQmFzZVxuIyMjXG5jbGFzcyBCYXNlXG5cbiAgY29uc3RydWN0b3I6IChvcHRpb25zID0ge30pIC0+XG4gICAgZGVidWcgPSBAZ2V0UGFyYW1zKCdkZWJ1ZycpXG4gICAgYXR0cnMgPSBhdHRycyBvciB7fVxuICAgIGlmIGRlYnVnXG4gICAgICBAZGVidWcgPSAoZGVidWcgaXMgJ3RydWUnIG9yIGRlYnVnIGlzICcxJylcbiAgICBlbHNlIGlmIGF0dHJzLmRlYnVnXG4gICAgICBAZGVidWcgPSAoYXR0cnMuZGVidWcgaXMgb24pXG4gICAgZWxzZVxuICAgICAgQGRlYnVnID0gZmFsc2VcbiAgICBAX2xpc3RlbmVycyA9IFtdXG5cbiAgdG9TdHJpbmc6IC0+ICdCYXNlJ1xuXG4gIGxvZzogKG1zZywgdHlwZSkgLT5cbiAgICByZXR1cm4gdW5sZXNzIEBkZWJ1Z1xuICAgIHR5cGUgPSB0eXBlIG9yICdpbmZvJ1xuICAgIGlmIHdpbmRvdy5jb25zb2xlIGFuZCB3aW5kb3cuY29uc29sZVt0eXBlXVxuICAgICAgd2luZG93LmNvbnNvbGVbdHlwZV0gXCJbI3tAdG9TdHJpbmcoKX1dICN7bXNnfVwiXG4gICAgcmV0dXJuXG5cbiAgb246ICh0eXBlLCBjYWxsYmFjaykgLT5cbiAgICBpZiAhdHlwZSBvciAhY2FsbGJhY2tcbiAgICAgIHRocm93IG5ldyBFcnJvcignQm90aCBldmVudCB0eXBlIGFuZCBjYWxsYmFjayBhcmUgcmVxdWlyZWQgcGFyYW1ldGVycycpXG4gICAgQGxvZyAnb24oKSAtIGV2ZW50IFxcJycgKyB0eXBlICsgJ1xcJyBpcyBzdWJzY3JpYmVkJ1xuICAgIEBfbGlzdGVuZXJzW3R5cGVdID0gW10gdW5sZXNzIEBfbGlzdGVuZXJzW3R5cGVdXG4gICAgY2FsbGJhY2suaW5zdGFuY2UgPSBAXG4gICAgQF9saXN0ZW5lcnNbdHlwZV0ucHVzaChjYWxsYmFjaylcbiAgICBjYWxsYmFja1xuXG4gIGVtaXQ6ICh0eXBlLCBkYXRhID0gW10pIC0+XG4gICAgQGxvZyBcImVtaXQoKSAtIGV2ZW50ICcje3R5cGV9JyBpcyB0cmlnZ2VyZWRcIlxuICAgIGRhdGEudW5zaGlmdFxuICAgICAgdHlwZTogdHlwZVxuICAgICAgdGFyZ2V0OiBAXG4gICAgdGhyb3cgbmV3IEVycm9yKCdMYWNrcyBvZiB0eXBlIHBhcmFtZXRlcicpIHVubGVzcyB0eXBlXG4gICAgaWYgQF9saXN0ZW5lcnNbdHlwZV0gYW5kIEBfbGlzdGVuZXJzW3R5cGVdLmxlbmd0aFxuICAgICAgZm9yIGkgb2YgQF9saXN0ZW5lcnNbdHlwZV1cbiAgICAgICAgQF9saXN0ZW5lcnNbdHlwZV1baV0uYXBwbHkgQCwgZGF0YVxuICAgIEBcblxuICBnZXRQYXJhbXM6IChrZXkpIC0+XG4gICAgaHJlZiA9IEBnZXRVcmwoKVxuICAgIHBhcmFtcyA9IHt9XG4gICAgcG9zID0gaHJlZi5pbmRleE9mKCc/JylcbiAgICBAbG9nICdnZXRQYXJhbXMoKSBpcyBleGVjdXRlZCdcbiAgICBpZiBocmVmLmluZGV4T2YoJyMnKSAhPSAtMVxuICAgICAgaGFzaGVzID0gaHJlZi5zbGljZShwb3MgKyAxLCBocmVmLmluZGV4T2YoJyMnKSkuc3BsaXQoJyYnKVxuICAgIGVsc2VcbiAgICAgIGhhc2hlcyA9IGhyZWYuc2xpY2UocG9zICsgMSkuc3BsaXQoJyYnKVxuICAgIGZvciBpIG9mIGhhc2hlc1xuICAgICAgaGFzaCA9IGhhc2hlc1tpXS5zcGxpdCgnPScpXG4gICAgICBwYXJhbXNbaGFzaFswXV0gPSBoYXNoWzFdXG4gICAgaWYga2V5IHRoZW4gcGFyYW1zW2tleV0gZWxzZSBwYXJhbXNcblxuICBnZXRVcmw6IC0+IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG5cbiMgUHJvbW90ZSB0byBnbG9iYWxcbndpbmRvdy5TdGFja2xhID0ge30gdW5sZXNzIHdpbmRvdy5TdGFja2xhXG53aW5kb3cuU3RhY2tsYS5CYXNlID0gQmFzZVxuIl19