
/*
 * @class Stackla.Base
 */

(function() {
  var Base;

  Base = (function() {
    function Base(options) {
      var attrs, debug;
      if (options == null) {
        options = {};
      }
      debug = this.getParams('debug');
      attrs = attrs || {};
      if (debug) {
        this.debug = debug === 'true' || debug === '1';
      } else if (attrs.debug) {
        this.debug = attrs.debug === true;
      } else {
        this.debug = false;
      }
      this._listeners = [];
    }

    Base.prototype.toString = function() {
      return 'Base';
    };

    Base.prototype.log = function(msg, type) {
      if (!this.debug) {
        return;
      }
      type = type || 'info';
      if (window.console && window.console[type]) {
        window.console[type]("[" + (this.toString()) + "] " + msg);
      }
    };

    Base.prototype.on = function(type, callback) {
      if (!type || !callback) {
        throw new Error('Both event type and callback are required parameters');
      }
      this.log('on() - event \'' + type + '\' is subscribed');
      if (!this._listeners[type]) {
        this._listeners[type] = [];
      }
      callback.instance = this;
      this._listeners[type].push(callback);
      return callback;
    };

    Base.prototype.emit = function(type, data) {
      var i, _results;
      if (data == null) {
        data = [];
      }
      this.log("emit() - event '" + type + "' is triggered");
      data.unshift({
        type: type,
        target: this
      });
      if (!type) {
        throw new Error('Lacks of type parameter');
      }
      if (this._listeners[type] && this._listeners[type].length) {
        _results = [];
        for (i in this._listeners[type]) {
          _results.push(this._listeners[type][i].apply(this, data));
        }
        return _results;
      }
    };

    Base.prototype.getParams = function(key) {
      var hash, hashes, href, i, params, pos;
      href = this.getUrl();
      params = {};
      pos = href.indexOf('?');
      this.log('getParams() is executed');
      if (href.indexOf('#') !== -1) {
        hashes = href.slice(pos + 1, href.indexOf('#')).split('&');
      } else {
        hashes = href.slice(pos + 1).split('&');
      }
      for (i in hashes) {
        hash = hashes[i].split('=');
        params[hash[0]] = hash[1];
      }
      if (key) {
        return params[key];
      } else {
        return params;
      }
    };

    Base.prototype.getUrl = function() {
      return window.location.href;
    };

    return Base;

  })();

  if (!window.Stackla) {
    window.Stackla = {};
  }

  window.Stackla.Base = Base;

}).call(this);

//# sourceMappingURL=data:application/json;base64,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LE9BUkE7QUFXQSxNQUFBLElBQUcsR0FBSDtlQUFZLE1BQU8sQ0FBQSxHQUFBLEVBQW5CO09BQUEsTUFBQTtlQUE2QixPQUE3QjtPQVpTO0lBQUEsQ0F2Q1gsQ0FBQTs7QUFBQSxtQkFxREEsTUFBQSxHQUFRLFNBQUEsR0FBQTthQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBbkI7SUFBQSxDQXJEUixDQUFBOztnQkFBQTs7TUFMRixDQUFBOztBQTZEQSxFQUFBLElBQUEsQ0FBQSxNQUFpQyxDQUFDLE9BQWxDO0FBQUEsSUFBQSxNQUFNLENBQUMsT0FBUCxHQUFpQixFQUFqQixDQUFBO0dBN0RBOztBQUFBLEVBOERBLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBZixHQUFzQixJQTlEdEIsQ0FBQTtBQUFBIiwiZmlsZSI6ImJhc2UuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbiMgQGNsYXNzIFN0YWNrbGEuQmFzZVxuIyMjXG5jbGFzcyBCYXNlXG5cbiAgY29uc3RydWN0b3I6IChvcHRpb25zID0ge30pIC0+XG4gICAgZGVidWcgPSBAZ2V0UGFyYW1zKCdkZWJ1ZycpXG4gICAgYXR0cnMgPSBhdHRycyBvciB7fVxuICAgIGlmIGRlYnVnXG4gICAgICBAZGVidWcgPSAoZGVidWcgaXMgJ3RydWUnIG9yIGRlYnVnIGlzICcxJylcbiAgICBlbHNlIGlmIGF0dHJzLmRlYnVnXG4gICAgICBAZGVidWcgPSAoYXR0cnMuZGVidWcgaXMgb24pXG4gICAgZWxzZVxuICAgICAgQGRlYnVnID0gZmFsc2VcbiAgICBAX2xpc3RlbmVycyA9IFtdXG5cbiAgdG9TdHJpbmc6IC0+ICdCYXNlJ1xuXG4gIGxvZzogKG1zZywgdHlwZSkgLT5cbiAgICByZXR1cm4gdW5sZXNzIEBkZWJ1Z1xuICAgIHR5cGUgPSB0eXBlIG9yICdpbmZvJ1xuICAgIGlmIHdpbmRvdy5jb25zb2xlIGFuZCB3aW5kb3cuY29uc29sZVt0eXBlXVxuICAgICAgd2luZG93LmNvbnNvbGVbdHlwZV0gXCJbI3tAdG9TdHJpbmcoKX1dICN7bXNnfVwiXG4gICAgcmV0dXJuXG5cbiAgb246ICh0eXBlLCBjYWxsYmFjaykgLT5cbiAgICBpZiAhdHlwZSBvciAhY2FsbGJhY2tcbiAgICAgIHRocm93IG5ldyBFcnJvcignQm90aCBldmVudCB0eXBlIGFuZCBjYWxsYmFjayBhcmUgcmVxdWlyZWQgcGFyYW1ldGVycycpXG4gICAgQGxvZyAnb24oKSAtIGV2ZW50IFxcJycgKyB0eXBlICsgJ1xcJyBpcyBzdWJzY3JpYmVkJ1xuICAgIEBfbGlzdGVuZXJzW3R5cGVdID0gW10gdW5sZXNzIEBfbGlzdGVuZXJzW3R5cGVdXG4gICAgY2FsbGJhY2suaW5zdGFuY2UgPSBAXG4gICAgQF9saXN0ZW5lcnNbdHlwZV0ucHVzaChjYWxsYmFjaylcbiAgICBjYWxsYmFja1xuXG4gIGVtaXQ6ICh0eXBlLCBkYXRhID0gW10pIC0+XG4gICAgQGxvZyBcImVtaXQoKSAtIGV2ZW50ICcje3R5cGV9JyBpcyB0cmlnZ2VyZWRcIlxuICAgIGRhdGEudW5zaGlmdFxuICAgICAgdHlwZTogdHlwZVxuICAgICAgdGFyZ2V0OiBAXG4gICAgdGhyb3cgbmV3IEVycm9yKCdMYWNrcyBvZiB0eXBlIHBhcmFtZXRlcicpIHVubGVzcyB0eXBlXG4gICAgaWYgQF9saXN0ZW5lcnNbdHlwZV0gYW5kIEBfbGlzdGVuZXJzW3R5cGVdLmxlbmd0aFxuICAgICAgZm9yIGkgb2YgQF9saXN0ZW5lcnNbdHlwZV1cbiAgICAgICAgQF9saXN0ZW5lcnNbdHlwZV1baV0uYXBwbHkgQCwgZGF0YVxuXG4gIGdldFBhcmFtczogKGtleSkgLT5cbiAgICBocmVmID0gQGdldFVybCgpXG4gICAgcGFyYW1zID0ge31cbiAgICBwb3MgPSBocmVmLmluZGV4T2YoJz8nKVxuICAgIEBsb2cgJ2dldFBhcmFtcygpIGlzIGV4ZWN1dGVkJ1xuICAgIGlmIGhyZWYuaW5kZXhPZignIycpICE9IC0xXG4gICAgICBoYXNoZXMgPSBocmVmLnNsaWNlKHBvcyArIDEsIGhyZWYuaW5kZXhPZignIycpKS5zcGxpdCgnJicpXG4gICAgZWxzZVxuICAgICAgaGFzaGVzID0gaHJlZi5zbGljZShwb3MgKyAxKS5zcGxpdCgnJicpXG4gICAgZm9yIGkgb2YgaGFzaGVzXG4gICAgICBoYXNoID0gaGFzaGVzW2ldLnNwbGl0KCc9JylcbiAgICAgIHBhcmFtc1toYXNoWzBdXSA9IGhhc2hbMV1cbiAgICBpZiBrZXkgdGhlbiBwYXJhbXNba2V5XSBlbHNlIHBhcmFtc1xuXG4gIGdldFVybDogLT4gd2luZG93LmxvY2F0aW9uLmhyZWZcblxuIyBQcm9tb3RlIHRvIGdsb2JhbFxud2luZG93LlN0YWNrbGEgPSB7fSB1bmxlc3Mgd2luZG93LlN0YWNrbGFcbndpbmRvdy5TdGFja2xhLkJhc2UgPSBCYXNlXG4iXX0=