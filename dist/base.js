
/*
 * @class Stackla.Base
 */

(function() {
  var Base;

  Base = (function() {
    function Base(options) {
      var attrs, debug;
      if (options == null) {
        options = {};
      }
      this.init(options);
      this.bind();
      debug = this.getParams('debug');
      attrs = attrs || {};
      if (debug) {
        this.debug = debug === 'true' || debug === '1';
      } else if (attrs.debug) {
        this.debug = attrs.debug === true;
      } else {
        this.debug = false;
      }
      this._listeners = [];
    }

    Base.prototype.toString = function() {
      return 'Base';
    };

    Base.prototype.log = function(msg, type) {
      if (!this.debug) {
        return;
      }
      type = type || 'info';
      if (window.console && window.console[type]) {
        window.console[type]("[" + (this.toString()) + "] " + msg);
      }
    };

    Base.prototype.on = function(type, callback) {
      if (!type || !callback) {
        throw new Error('Both event type and callback are required parameters');
      }
      this.log('on() - event \'' + type + '\' is subscribed');
      if (!this._listeners[type]) {
        this._listeners[type] = [];
      }
      callback.instance = this;
      this._listeners[type].push(callback);
      return callback;
    };

    Base.prototype.emit = function(type, data) {
      var i, _results;
      if (data == null) {
        data = [];
      }
      this.log("emit() - event '" + type + "' is triggered");
      data.unshift({
        type: type,
        target: this
      });
      if (!type) {
        throw new Error('Lacks of type parameter');
      }
      if (this._listeners[type] && this._listeners[type].length) {
        _results = [];
        for (i in this._listeners[type]) {
          _results.push(this._listeners[type][i].apply(this, data));
        }
        return _results;
      }
    };

    Base.prototype.getParams = function(key) {
      var hash, hashes, href, i, params, pos;
      href = this.getUrl();
      params = {};
      pos = href.indexOf('?');
      this.log('getParams() is executed');
      if (href.indexOf('#') !== -1) {
        hashes = href.slice(pos + 1, href.indexOf('#')).split('&');
      } else {
        hashes = href.slice(pos + 1).split('&');
      }
      for (i in hashes) {
        hash = hashes[i].split('=');
        params[hash[0]] = hash[1];
      }
      if (key) {
        return params[key];
      } else {
        return params;
      }
    };

    Base.prototype.getUrl = function() {
      return window.location.href;
    };

    return Base;

  })();

  if (!window.Stackla) {
    window.Stackla = {};
  }

  window.Stackla.Base = Base;

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QUFBO0FBQUEsUUFDQSxNQUFPLENBQUEsSUFBSyxDQUFBLENBQUEsQ0FBTCxDQUFQLEdBQWtCLElBQUssQ0FBQSxDQUFBLENBRHZCLENBREY7QUFBQSxPQVJBO0FBV0EsTUFBQSxJQUFHLEdBQUg7ZUFBWSxNQUFPLENBQUEsR0FBQSxFQUFuQjtPQUFBLE1BQUE7ZUFBNkIsT0FBN0I7T0FaUztJQUFBLENBekNYLENBQUE7O0FBQUEsbUJBdURBLE1BQUEsR0FBUSxTQUFBLEdBQUE7YUFBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQW5CO0lBQUEsQ0F2RFIsQ0FBQTs7Z0JBQUE7O01BTEYsQ0FBQTs7QUErREEsRUFBQSxJQUFBLENBQUEsTUFBaUMsQ0FBQyxPQUFsQztBQUFBLElBQUEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsRUFBakIsQ0FBQTtHQS9EQTs7QUFBQSxFQWdFQSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQWYsR0FBc0IsSUFoRXRCLENBQUE7QUFBQSIsImZpbGUiOiJiYXNlLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4jIEBjbGFzcyBTdGFja2xhLkJhc2VcbiMjI1xuY2xhc3MgQmFzZVxuXG4gIGNvbnN0cnVjdG9yOiAob3B0aW9ucyA9IHt9KSAtPlxuICAgIEBpbml0KG9wdGlvbnMpXG4gICAgQGJpbmQoKVxuICAgIGRlYnVnID0gQGdldFBhcmFtcygnZGVidWcnKVxuICAgIGF0dHJzID0gYXR0cnMgb3Ige31cbiAgICBpZiBkZWJ1Z1xuICAgICAgQGRlYnVnID0gKGRlYnVnIGlzICd0cnVlJyBvciBkZWJ1ZyBpcyAnMScpXG4gICAgZWxzZSBpZiBhdHRycy5kZWJ1Z1xuICAgICAgQGRlYnVnID0gKGF0dHJzLmRlYnVnIGlzIG9uKVxuICAgIGVsc2VcbiAgICAgIEBkZWJ1ZyA9IGZhbHNlXG4gICAgQF9saXN0ZW5lcnMgPSBbXVxuXG4gIHRvU3RyaW5nOiAtPiAnQmFzZSdcblxuICBsb2c6IChtc2csIHR5cGUpIC0+XG4gICAgcmV0dXJuIHVubGVzcyBAZGVidWdcbiAgICB0eXBlID0gdHlwZSBvciAnaW5mbydcbiAgICBpZiB3aW5kb3cuY29uc29sZSBhbmQgd2luZG93LmNvbnNvbGVbdHlwZV1cbiAgICAgIHdpbmRvdy5jb25zb2xlW3R5cGVdIFwiWyN7QHRvU3RyaW5nKCl9XSAje21zZ31cIlxuICAgIHJldHVyblxuXG4gIG9uOiAodHlwZSwgY2FsbGJhY2spIC0+XG4gICAgaWYgIXR5cGUgb3IgIWNhbGxiYWNrXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JvdGggZXZlbnQgdHlwZSBhbmQgY2FsbGJhY2sgYXJlIHJlcXVpcmVkIHBhcmFtZXRlcnMnKVxuICAgIEBsb2cgJ29uKCkgLSBldmVudCBcXCcnICsgdHlwZSArICdcXCcgaXMgc3Vic2NyaWJlZCdcbiAgICBAX2xpc3RlbmVyc1t0eXBlXSA9IFtdIHVubGVzcyBAX2xpc3RlbmVyc1t0eXBlXVxuICAgIGNhbGxiYWNrLmluc3RhbmNlID0gQFxuICAgIEBfbGlzdGVuZXJzW3R5cGVdLnB1c2goY2FsbGJhY2spXG4gICAgY2FsbGJhY2tcblxuICBlbWl0OiAodHlwZSwgZGF0YSA9IFtdKSAtPlxuICAgIEBsb2cgXCJlbWl0KCkgLSBldmVudCAnI3t0eXBlfScgaXMgdHJpZ2dlcmVkXCJcbiAgICBkYXRhLnVuc2hpZnRcbiAgICAgIHR5cGU6IHR5cGVcbiAgICAgIHRhcmdldDogQFxuICAgIHRocm93IG5ldyBFcnJvcignTGFja3Mgb2YgdHlwZSBwYXJhbWV0ZXInKSB1bmxlc3MgdHlwZVxuICAgIGlmIEBfbGlzdGVuZXJzW3R5cGVdIGFuZCBAX2xpc3RlbmVyc1t0eXBlXS5sZW5ndGhcbiAgICAgIGZvciBpIG9mIEBfbGlzdGVuZXJzW3R5cGVdXG4gICAgICAgIEBfbGlzdGVuZXJzW3R5cGVdW2ldLmFwcGx5IEAsIGRhdGFcblxuICBnZXRQYXJhbXM6IChrZXkpIC0+XG4gICAgaHJlZiA9IEBnZXRVcmwoKVxuICAgIHBhcmFtcyA9IHt9XG4gICAgcG9zID0gaHJlZi5pbmRleE9mKCc/JylcbiAgICBAbG9nICdnZXRQYXJhbXMoKSBpcyBleGVjdXRlZCdcbiAgICBpZiBocmVmLmluZGV4T2YoJyMnKSAhPSAtMVxuICAgICAgaGFzaGVzID0gaHJlZi5zbGljZShwb3MgKyAxLCBocmVmLmluZGV4T2YoJyMnKSkuc3BsaXQoJyYnKVxuICAgIGVsc2VcbiAgICAgIGhhc2hlcyA9IGhyZWYuc2xpY2UocG9zICsgMSkuc3BsaXQoJyYnKVxuICAgIGZvciBpIG9mIGhhc2hlc1xuICAgICAgaGFzaCA9IGhhc2hlc1tpXS5zcGxpdCgnPScpXG4gICAgICBwYXJhbXNbaGFzaFswXV0gPSBoYXNoWzFdXG4gICAgaWYga2V5IHRoZW4gcGFyYW1zW2tleV0gZWxzZSBwYXJhbXNcblxuICBnZXRVcmw6IC0+IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG5cbiMgUHJvbW90ZSB0byBnbG9iYWxcbndpbmRvdy5TdGFja2xhID0ge30gdW5sZXNzIHdpbmRvdy5TdGFja2xhXG53aW5kb3cuU3RhY2tsYS5CYXNlID0gQmFzZVxuIl19