(function() {
  var Tagla, proto;

  Tagla = (function() {
    function Tagla($wrapper, options) {
      if (options == null) {
        options = {};
      }
      this.wrapper = $($wrapper);
      this.init(options);
      this.bind();
    }

    return Tagla;

  })();

  Tagla.NAME = 'Tagla';

  Tagla.PREFIX = 'tagla-';

  Tagla.FORM_TEMPLATE = ['<form class="photo-tags-form photo-tags-form-hide">', '     <input type="hidden" name="x">', '     <input type="hidden" name="y">', '     <label class="photo-tags-form-label">', '         <select data-placeholder="Choose tags..." type="text" name="label" class="tagla-form-input chosen-select">', '             <option>Frankie Issue #6</option>', '             <option>Frankie Wall Calendar 2015</option>', '             <option>Frankie A5 Daily Planner</option>', '         </select>', '     </label>', '     <button type="submit" class="photo-tags-form-button">Save</button>', '     <button type="reset" class="photo-tags-form-button">Cancel</button>', '</form>'].join('\n');

  Tagla.TAG_TEMPLATE = ['<span class="tagla-tag">', '    <i class="fs fs-tag"><i>', '</span>'].join('\n');

  proto = {
    log: function(msg, type) {
      if (type == null) {
        type = 'info';
      }
      if (!this.debug || !window.console || !window.console[type]) {
        return;
      }
      return window.console[type]("[" + Tagla.NAME + "] " + msg);
    },
    formatFloat: function(num, pos) {
      var size;
      size = Math.pow(10, pos);
      return Math.round(num * size) / size;
    },
    appendTag: function(tag) {
      var $tag, offsetX, offsetY;
      this.log('appendTag() is executed');
      $tag = $(Mustache.render(this.tagTemplate, tag));
      this.wrapper.append($tag);
      offsetX = this.formatFloat($tag.outerWidth() / 2 / this.wrapper.width() * 100, 2);
      offsetY = this.formatFloat($tag.outerHeight() / 2 / this.wrapper.height() * 100, 2);
      return $tag.css({
        left: (tag.x - offsetX) + "%",
        top: (tag.y - offsetY) + "%"
      });
    },
    updateImageSize: function() {
      var image;
      this.log('updateImageSize() is executed');
      image = this.image[0];
      this.currentWidth = image.width;
      this.currentHeight = image.height;
      this.widthRatio = this.currentWidth / this.naturalWidth;
      return this.heightRatio = this.currentHeight / this.naturalHeight;
    },
    handleImageError: function(e) {
      this.log('handleImageError() is executed');
      this.imageLoaded = false;
      return this.destroy();
    },
    handleImageLoad: function(e) {
      this.log('handleImageLoad() is executed');
      this.imageLoaded = true;
      this.naturalWidth = this.image[0].width;
      this.naturalHeight = this.image[0].height;
      this.updateImageSize();
      return this.render();
    },
    handleWindowResize: function(e) {
      var image;
      this.log('handleImageResize() is executed');
      image = this.image[0];
      if (image.width === this.currentWidth && image.height === this.currentHeight) {
        return;
      }
      return this.updateImageSize();
    },
    init: function(options) {
      var _ref;
      this.data = options.data || [];
      this.editor = (_ref = options.editor === true) != null ? _ref : {
        on: false
      };
      this.form = options.form ? $(options.form) : Tagla.FORM_TEMPLATE;
      this.tagTemplate = options.tagTemplate ? $(options.tagTemplate).html() : Tagla.TAG_TEMPLATE;
      this.debug = true;
      this.image = this.wrapper.find('img');
      this.imageLoaded = this.image[0].complete;
      this.currentWidth = this.image[0].width;
      return this.currentHeight = this.image[0].height;
    },
    bind: function() {
      this.log('bind() is executed');
      return $(window).on('resize', $.proxy(this.handleWindowResize, this));
    },
    render: function() {
      var img, tag, _i, _len, _ref;
      if (!this.imageLoaded) {
        img = new Image();
        img.src = this.image.attr('src');
        $(img).one('load', $.proxy(this.handleImageLoad, this)).one('error', $.proxy(this.handleImageError, this));
        return;
      }
      this.log('render() is executed');
      _ref = this.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        this.appendTag(tag);
      }
      return this.wrapper.addClass('tagla');
    },
    destroy: function() {
      return this.log('destroy() is executed');
    }
  };

  $.extend(Tagla.prototype, proto);

  window.Tagla = Tagla;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhZ2xhLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtBQUFBLE1BQUEsWUFBQTs7QUFBQSxFQUFNO0FBQ1MsSUFBQSxlQUFDLFFBQUQsRUFBVyxPQUFYLEdBQUE7O1FBQVcsVUFBVTtPQUNoQztBQUFBLE1BQUEsSUFBQyxDQUFBLE9BQUQsR0FBVyxDQUFBLENBQUUsUUFBRixDQUFYLENBQUE7QUFBQSxNQUNBLElBQUMsQ0FBQSxJQUFELENBQU0sT0FBTixDQURBLENBQUE7QUFBQSxNQUVBLElBQUMsQ0FBQSxJQUFELENBQUEsQ0FGQSxDQURXO0lBQUEsQ0FBYjs7aUJBQUE7O01BREYsQ0FBQTs7QUFBQSxFQU1BLEtBQUssQ0FBQyxJQUFOLEdBQWMsT0FOZCxDQUFBOztBQUFBLEVBT0EsS0FBSyxDQUFDLE1BQU4sR0FBZ0IsUUFQaEIsQ0FBQTs7QUFBQSxFQVFBLEtBQUssQ0FBQyxhQUFOLEdBQXNCLENBQ25CLHFEQURtQixFQUVuQixxQ0FGbUIsRUFHbkIscUNBSG1CLEVBSW5CLDRDQUptQixFQUtuQixxSEFMbUIsRUFNbkIsZ0RBTm1CLEVBT25CLDBEQVBtQixFQVFuQix3REFSbUIsRUFTbkIsb0JBVG1CLEVBVW5CLGVBVm1CLEVBV25CLHlFQVhtQixFQVluQiwwRUFabUIsRUFhbkIsU0FibUIsQ0FjckIsQ0FBQyxJQWRvQixDQWNkLElBZGMsQ0FSdEIsQ0FBQTs7QUFBQSxFQXVCQSxLQUFLLENBQUMsWUFBTixHQUFxQixDQUNsQiwwQkFEa0IsRUFFbEIsOEJBRmtCLEVBR2xCLFNBSGtCLENBSXBCLENBQUMsSUFKbUIsQ0FJYixJQUphLENBdkJyQixDQUFBOztBQUFBLEVBNkJBLEtBQUEsR0FJRTtBQUFBLElBQUEsR0FBQSxFQUFLLFNBQUMsR0FBRCxFQUFNLElBQU4sR0FBQTs7UUFBTSxPQUFRO09BQ2pCO0FBQUEsTUFBQSxJQUFVLENBQUEsSUFBRSxDQUFBLEtBQUYsSUFBVyxDQUFBLE1BQU8sQ0FBQyxPQUFuQixJQUE4QixDQUFBLE1BQU8sQ0FBQyxPQUFRLENBQUEsSUFBQSxDQUF4RDtBQUFBLGNBQUEsQ0FBQTtPQUFBO2FBQ0EsTUFBTSxDQUFDLE9BQVEsQ0FBQSxJQUFBLENBQWYsQ0FBc0IsR0FBQSxHQUFHLEtBQUssQ0FBQyxJQUFULEdBQWMsSUFBZCxHQUFrQixHQUF4QyxFQUZHO0lBQUEsQ0FBTDtBQUFBLElBSUEsV0FBQSxFQUFhLFNBQUMsR0FBRCxFQUFNLEdBQU4sR0FBQTtBQUNYLFVBQUEsSUFBQTtBQUFBLE1BQUEsSUFBQSxHQUFPLElBQUksQ0FBQyxHQUFMLENBQVMsRUFBVCxFQUFhLEdBQWIsQ0FBUCxDQUFBO2FBQ0EsSUFBSSxDQUFDLEtBQUwsQ0FBVyxHQUFBLEdBQU0sSUFBakIsQ0FBQSxHQUF5QixLQUZkO0lBQUEsQ0FKYjtBQUFBLElBUUEsU0FBQSxFQUFXLFNBQUMsR0FBRCxHQUFBO0FBQ1QsVUFBQSxzQkFBQTtBQUFBLE1BQUEsSUFBQyxDQUFBLEdBQUQsQ0FBTSx5QkFBTixDQUFBLENBQUE7QUFBQSxNQUNBLElBQUEsR0FBTyxDQUFBLENBQUUsUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsSUFBQyxDQUFBLFdBQWpCLEVBQThCLEdBQTlCLENBQUYsQ0FEUCxDQUFBO0FBQUEsTUFFQSxJQUFDLENBQUEsT0FBTyxDQUFDLE1BQVQsQ0FBZ0IsSUFBaEIsQ0FGQSxDQUFBO0FBQUEsTUFJQSxPQUFBLEdBQVUsSUFBQyxDQUFBLFdBQUQsQ0FBYSxJQUFJLENBQUMsVUFBTCxDQUFBLENBQUEsR0FBb0IsQ0FBcEIsR0FBd0IsSUFBQyxDQUFBLE9BQU8sQ0FBQyxLQUFULENBQUEsQ0FBeEIsR0FBMkMsR0FBeEQsRUFBNkQsQ0FBN0QsQ0FKVixDQUFBO0FBQUEsTUFLQSxPQUFBLEdBQVUsSUFBQyxDQUFBLFdBQUQsQ0FBYSxJQUFJLENBQUMsV0FBTCxDQUFBLENBQUEsR0FBcUIsQ0FBckIsR0FBeUIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxNQUFULENBQUEsQ0FBekIsR0FBNkMsR0FBMUQsRUFBK0QsQ0FBL0QsQ0FMVixDQUFBO2FBTUEsSUFBSSxDQUFDLEdBQUwsQ0FDRTtBQUFBLFFBQUEsSUFBQSxFQUFRLENBQUMsR0FBRyxDQUFDLENBQUosR0FBUSxPQUFULENBQUEsR0FBaUIsR0FBekI7QUFBQSxRQUNBLEdBQUEsRUFBTyxDQUFDLEdBQUcsQ0FBQyxDQUFKLEdBQVEsT0FBVCxDQUFBLEdBQWlCLEdBRHhCO09BREYsRUFQUztJQUFBLENBUlg7QUFBQSxJQW1CQSxlQUFBLEVBQWlCLFNBQUEsR0FBQTtBQUNmLFVBQUEsS0FBQTtBQUFBLE1BQUEsSUFBQyxDQUFBLEdBQUQsQ0FBTSwrQkFBTixDQUFBLENBQUE7QUFBQSxNQUNBLEtBQUEsR0FBUSxJQUFDLENBQUEsS0FBTSxDQUFBLENBQUEsQ0FEZixDQUFBO0FBQUEsTUFFQSxJQUFDLENBQUEsWUFBRCxHQUFnQixLQUFLLENBQUMsS0FGdEIsQ0FBQTtBQUFBLE1BR0EsSUFBQyxDQUFBLGFBQUQsR0FBaUIsS0FBSyxDQUFDLE1BSHZCLENBQUE7QUFBQSxNQUlBLElBQUMsQ0FBQSxVQUFELEdBQWMsSUFBQyxDQUFBLFlBQUQsR0FBZ0IsSUFBQyxDQUFBLFlBSi9CLENBQUE7YUFLQSxJQUFDLENBQUEsV0FBRCxHQUFlLElBQUMsQ0FBQSxhQUFELEdBQWlCLElBQUMsQ0FBQSxjQU5sQjtJQUFBLENBbkJqQjtBQUFBLElBOEJBLGdCQUFBLEVBQWtCLFNBQUMsQ0FBRCxHQUFBO0FBQ2hCLE1BQUEsSUFBQyxDQUFBLEdBQUQsQ0FBTSxnQ0FBTixDQUFBLENBQUE7QUFBQSxNQUNBLElBQUMsQ0FBQSxXQUFELEdBQWUsS0FEZixDQUFBO2FBRUEsSUFBQyxDQUFBLE9BQUQsQ0FBQSxFQUhnQjtJQUFBLENBOUJsQjtBQUFBLElBbUNBLGVBQUEsRUFBaUIsU0FBQyxDQUFELEdBQUE7QUFDZixNQUFBLElBQUMsQ0FBQSxHQUFELENBQU0sK0JBQU4sQ0FBQSxDQUFBO0FBQUEsTUFDQSxJQUFDLENBQUEsV0FBRCxHQUFlLElBRGYsQ0FBQTtBQUFBLE1BRUEsSUFBQyxDQUFBLFlBQUQsR0FBZ0IsSUFBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBLENBQUUsQ0FBQyxLQUYxQixDQUFBO0FBQUEsTUFHQSxJQUFDLENBQUEsYUFBRCxHQUFpQixJQUFDLENBQUEsS0FBTSxDQUFBLENBQUEsQ0FBRSxDQUFDLE1BSDNCLENBQUE7QUFBQSxNQUlBLElBQUMsQ0FBQSxlQUFELENBQUEsQ0FKQSxDQUFBO2FBS0EsSUFBQyxDQUFBLE1BQUQsQ0FBQSxFQU5lO0lBQUEsQ0FuQ2pCO0FBQUEsSUEyQ0Esa0JBQUEsRUFBb0IsU0FBQyxDQUFELEdBQUE7QUFDbEIsVUFBQSxLQUFBO0FBQUEsTUFBQSxJQUFDLENBQUEsR0FBRCxDQUFNLGlDQUFOLENBQUEsQ0FBQTtBQUFBLE1BQ0EsS0FBQSxHQUFRLElBQUMsQ0FBQSxLQUFNLENBQUEsQ0FBQSxDQURmLENBQUE7QUFFQSxNQUFBLElBQVUsS0FBSyxDQUFDLEtBQU4sS0FBZSxJQUFDLENBQUEsWUFBaEIsSUFBaUMsS0FBSyxDQUFDLE1BQU4sS0FBZ0IsSUFBQyxDQUFBLGFBQTVEO0FBQUEsY0FBQSxDQUFBO09BRkE7YUFHQSxJQUFDLENBQUEsZUFBRCxDQUFBLEVBSmtCO0lBQUEsQ0EzQ3BCO0FBQUEsSUFvREEsSUFBQSxFQUFNLFNBQUMsT0FBRCxHQUFBO0FBRUosVUFBQSxJQUFBO0FBQUEsTUFBQSxJQUFDLENBQUEsSUFBRCxHQUFRLE9BQU8sQ0FBQyxJQUFSLElBQWdCLEVBQXhCLENBQUE7QUFBQSxNQUNBLElBQUMsQ0FBQSxNQUFELHFEQUFtQztBQUFBLFFBQUEsRUFBQSxFQUFLLEtBQUw7T0FEbkMsQ0FBQTtBQUFBLE1BRUEsSUFBQyxDQUFBLElBQUQsR0FBVyxPQUFPLENBQUMsSUFBWCxHQUFxQixDQUFBLENBQUUsT0FBTyxDQUFDLElBQVYsQ0FBckIsR0FBMEMsS0FBSyxDQUFDLGFBRnhELENBQUE7QUFBQSxNQUdBLElBQUMsQ0FBQSxXQUFELEdBQWtCLE9BQU8sQ0FBQyxXQUFYLEdBQTRCLENBQUEsQ0FBRSxPQUFPLENBQUMsV0FBVixDQUFzQixDQUFDLElBQXZCLENBQUEsQ0FBNUIsR0FBK0QsS0FBSyxDQUFDLFlBSHBGLENBQUE7QUFBQSxNQUtBLElBQUMsQ0FBQSxLQUFELEdBQVMsSUFMVCxDQUFBO0FBQUEsTUFNQSxJQUFDLENBQUEsS0FBRCxHQUFTLElBQUMsQ0FBQSxPQUFPLENBQUMsSUFBVCxDQUFlLEtBQWYsQ0FOVCxDQUFBO0FBQUEsTUFPQSxJQUFDLENBQUEsV0FBRCxHQUFlLElBQUMsQ0FBQSxLQUFNLENBQUEsQ0FBQSxDQUFFLENBQUMsUUFQekIsQ0FBQTtBQUFBLE1BUUEsSUFBQyxDQUFBLFlBQUQsR0FBZ0IsSUFBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBLENBQUUsQ0FBQyxLQVIxQixDQUFBO2FBU0EsSUFBQyxDQUFBLGFBQUQsR0FBaUIsSUFBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBLENBQUUsQ0FBQyxPQVh2QjtJQUFBLENBcEROO0FBQUEsSUFpRUEsSUFBQSxFQUFNLFNBQUEsR0FBQTtBQUNKLE1BQUEsSUFBQyxDQUFBLEdBQUQsQ0FBTSxvQkFBTixDQUFBLENBQUE7YUFDQSxDQUFBLENBQUUsTUFBRixDQUFTLENBQUMsRUFBVixDQUFjLFFBQWQsRUFBdUIsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxJQUFDLENBQUEsa0JBQVQsRUFBNkIsSUFBN0IsQ0FBdkIsRUFGSTtJQUFBLENBakVOO0FBQUEsSUFxRUEsTUFBQSxFQUFRLFNBQUEsR0FBQTtBQUVOLFVBQUEsd0JBQUE7QUFBQSxNQUFBLElBQUEsQ0FBQSxJQUFRLENBQUEsV0FBUjtBQUNFLFFBQUEsR0FBQSxHQUFVLElBQUEsS0FBQSxDQUFBLENBQVYsQ0FBQTtBQUFBLFFBQ0EsR0FBRyxDQUFDLEdBQUosR0FBVSxJQUFDLENBQUEsS0FBSyxDQUFDLElBQVAsQ0FBYSxLQUFiLENBRFYsQ0FBQTtBQUFBLFFBRUEsQ0FBQSxDQUFFLEdBQUYsQ0FDRSxDQUFDLEdBREgsQ0FDUSxNQURSLEVBQ2UsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxJQUFDLENBQUEsZUFBVCxFQUEwQixJQUExQixDQURmLENBRUUsQ0FBQyxHQUZILENBRVEsT0FGUixFQUVnQixDQUFDLENBQUMsS0FBRixDQUFRLElBQUMsQ0FBQSxnQkFBVCxFQUEyQixJQUEzQixDQUZoQixDQUZBLENBQUE7QUFLQSxjQUFBLENBTkY7T0FBQTtBQUFBLE1BUUEsSUFBQyxDQUFBLEdBQUQsQ0FBTSxzQkFBTixDQVJBLENBQUE7QUFTQTtBQUFBLFdBQUEsMkNBQUE7dUJBQUE7QUFBQSxRQUFBLElBQUMsQ0FBQSxTQUFELENBQVcsR0FBWCxDQUFBLENBQUE7QUFBQSxPQVRBO2FBVUEsSUFBQyxDQUFBLE9BQU8sQ0FBQyxRQUFULENBQW1CLE9BQW5CLEVBWk07SUFBQSxDQXJFUjtBQUFBLElBbUZBLE9BQUEsRUFBUyxTQUFBLEdBQUE7YUFDUCxJQUFDLENBQUEsR0FBRCxDQUFNLHVCQUFOLEVBRE87SUFBQSxDQW5GVDtHQWpDRixDQUFBOztBQUFBLEVBdUhBLENBQUMsQ0FBQyxNQUFGLENBQVMsS0FBSyxDQUFBLFNBQWQsRUFBa0IsS0FBbEIsQ0F2SEEsQ0FBQTs7QUFBQSxFQXdIQSxNQUFNLENBQUMsS0FBUCxHQUFlLEtBeEhmLENBQUE7QUFBQSIsImZpbGUiOiJ0YWdsYS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIlxuY2xhc3MgVGFnbGFcbiAgY29uc3RydWN0b3I6ICgkd3JhcHBlciwgb3B0aW9ucyA9IHt9KSAtPlxuICAgIEB3cmFwcGVyID0gJCgkd3JhcHBlcilcbiAgICBAaW5pdChvcHRpb25zKVxuICAgIEBiaW5kKClcblxuVGFnbGEuTkFNRSA9ICdUYWdsYSdcblRhZ2xhLlBSRUZJWCA9ICd0YWdsYS0nXG5UYWdsYS5GT1JNX1RFTVBMQVRFID0gW1xuICAnPGZvcm0gY2xhc3M9XCJwaG90by10YWdzLWZvcm0gcGhvdG8tdGFncy1mb3JtLWhpZGVcIj4nXG4gICcgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cInhcIj4nXG4gICcgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cInlcIj4nXG4gICcgICAgIDxsYWJlbCBjbGFzcz1cInBob3RvLXRhZ3MtZm9ybS1sYWJlbFwiPidcbiAgJyAgICAgICAgIDxzZWxlY3QgZGF0YS1wbGFjZWhvbGRlcj1cIkNob29zZSB0YWdzLi4uXCIgdHlwZT1cInRleHRcIiBuYW1lPVwibGFiZWxcIiBjbGFzcz1cInRhZ2xhLWZvcm0taW5wdXQgY2hvc2VuLXNlbGVjdFwiPidcbiAgJyAgICAgICAgICAgICA8b3B0aW9uPkZyYW5raWUgSXNzdWUgIzY8L29wdGlvbj4nXG4gICcgICAgICAgICAgICAgPG9wdGlvbj5GcmFua2llIFdhbGwgQ2FsZW5kYXIgMjAxNTwvb3B0aW9uPidcbiAgJyAgICAgICAgICAgICA8b3B0aW9uPkZyYW5raWUgQTUgRGFpbHkgUGxhbm5lcjwvb3B0aW9uPidcbiAgJyAgICAgICAgIDwvc2VsZWN0PidcbiAgJyAgICAgPC9sYWJlbD4nXG4gICcgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwicGhvdG8tdGFncy1mb3JtLWJ1dHRvblwiPlNhdmU8L2J1dHRvbj4nXG4gICcgICAgIDxidXR0b24gdHlwZT1cInJlc2V0XCIgY2xhc3M9XCJwaG90by10YWdzLWZvcm0tYnV0dG9uXCI+Q2FuY2VsPC9idXR0b24+J1xuICAnPC9mb3JtPidcbl0uam9pbignXFxuJylcblRhZ2xhLlRBR19URU1QTEFURSA9IFtcbiAgJzxzcGFuIGNsYXNzPVwidGFnbGEtdGFnXCI+J1xuICAnICAgIDxpIGNsYXNzPVwiZnMgZnMtdGFnXCI+PGk+J1xuICAnPC9zcGFuPidcbl0uam9pbignXFxuJylcblxucHJvdG8gPVxuICAjIyMjIyMjIyMjIyMjI1xuICAjIFV0aWxpdGllc1xuICAjIyMjIyMjIyMjIyMjI1xuICBsb2c6IChtc2csIHR5cGUgPSAnaW5mbycpIC0+XG4gICAgcmV0dXJuIGlmICFAZGVidWcgb3IgIXdpbmRvdy5jb25zb2xlIG9yICF3aW5kb3cuY29uc29sZVt0eXBlXVxuICAgIHdpbmRvdy5jb25zb2xlW3R5cGVdIFwiWyN7VGFnbGEuTkFNRX1dICN7bXNnfVwiXG5cbiAgZm9ybWF0RmxvYXQ6IChudW0sIHBvcykgLT5cbiAgICBzaXplID0gTWF0aC5wb3coMTAsIHBvcylcbiAgICBNYXRoLnJvdW5kKG51bSAqIHNpemUpIC8gc2l6ZVxuXG4gIGFwcGVuZFRhZzogKHRhZykgLT5cbiAgICBAbG9nICdhcHBlbmRUYWcoKSBpcyBleGVjdXRlZCdcbiAgICAkdGFnID0gJChNdXN0YWNoZS5yZW5kZXIoQHRhZ1RlbXBsYXRlLCB0YWcpKVxuICAgIEB3cmFwcGVyLmFwcGVuZCgkdGFnKVxuXG4gICAgb2Zmc2V0WCA9IEBmb3JtYXRGbG9hdCgkdGFnLm91dGVyV2lkdGgoKSAvIDIgLyBAd3JhcHBlci53aWR0aCgpICogMTAwLCAyKVxuICAgIG9mZnNldFkgPSBAZm9ybWF0RmxvYXQoJHRhZy5vdXRlckhlaWdodCgpIC8gMiAvIEB3cmFwcGVyLmhlaWdodCgpICogMTAwLCAyKVxuICAgICR0YWcuY3NzXG4gICAgICBsZWZ0OiBcIiN7dGFnLnggLSBvZmZzZXRYfSVcIlxuICAgICAgdG9wOiBcIiN7dGFnLnkgLSBvZmZzZXRZfSVcIlxuXG4gIHVwZGF0ZUltYWdlU2l6ZTogLT5cbiAgICBAbG9nICd1cGRhdGVJbWFnZVNpemUoKSBpcyBleGVjdXRlZCdcbiAgICBpbWFnZSA9IEBpbWFnZVswXVxuICAgIEBjdXJyZW50V2lkdGggPSBpbWFnZS53aWR0aFxuICAgIEBjdXJyZW50SGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0XG4gICAgQHdpZHRoUmF0aW8gPSBAY3VycmVudFdpZHRoIC8gQG5hdHVyYWxXaWR0aFxuICAgIEBoZWlnaHRSYXRpbyA9IEBjdXJyZW50SGVpZ2h0IC8gQG5hdHVyYWxIZWlnaHRcblxuICAjIyMjIyMjIyMjIyMjIyMjIyMjI1xuICAjIEV2ZW50IEhhbmRsZXJzXG4gICMjIyMjIyMjIyMjIyMjIyMjIyMjXG4gIGhhbmRsZUltYWdlRXJyb3I6IChlKSAtPlxuICAgIEBsb2cgJ2hhbmRsZUltYWdlRXJyb3IoKSBpcyBleGVjdXRlZCdcbiAgICBAaW1hZ2VMb2FkZWQgPSBmYWxzZVxuICAgIEBkZXN0cm95KClcblxuICBoYW5kbGVJbWFnZUxvYWQ6IChlKSAtPlxuICAgIEBsb2cgJ2hhbmRsZUltYWdlTG9hZCgpIGlzIGV4ZWN1dGVkJ1xuICAgIEBpbWFnZUxvYWRlZCA9IHRydWVcbiAgICBAbmF0dXJhbFdpZHRoID0gQGltYWdlWzBdLndpZHRoXG4gICAgQG5hdHVyYWxIZWlnaHQgPSBAaW1hZ2VbMF0uaGVpZ2h0XG4gICAgQHVwZGF0ZUltYWdlU2l6ZSgpXG4gICAgQHJlbmRlcigpXG5cbiAgaGFuZGxlV2luZG93UmVzaXplOiAoZSkgLT5cbiAgICBAbG9nICdoYW5kbGVJbWFnZVJlc2l6ZSgpIGlzIGV4ZWN1dGVkJ1xuICAgIGltYWdlID0gQGltYWdlWzBdXG4gICAgcmV0dXJuIGlmIGltYWdlLndpZHRoIGlzIEBjdXJyZW50V2lkdGggYW5kIGltYWdlLmhlaWdodCBpcyBAY3VycmVudEhlaWdodFxuICAgIEB1cGRhdGVJbWFnZVNpemUoKVxuXG4gICMjIyMjIyMjIyMjIyMjIyMjIyMjXG4gICMgTGlmZWN5Y2xlIE1ldGhvZHNcbiAgIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiAgaW5pdDogKG9wdGlvbnMpIC0+XG4gICAgIyBDb25maWd1cmUgT3B0aW9uc1xuICAgIEBkYXRhID0gb3B0aW9ucy5kYXRhIHx8IFtdXG4gICAgQGVkaXRvciA9IChvcHRpb25zLmVkaXRvciBpcyBvbikgPyBvbiA6IGZhbHNlXG4gICAgQGZvcm0gPSBpZiBvcHRpb25zLmZvcm0gdGhlbiAkKG9wdGlvbnMuZm9ybSkgZWxzZSBUYWdsYS5GT1JNX1RFTVBMQVRFXG4gICAgQHRhZ1RlbXBsYXRlID0gaWYgb3B0aW9ucy50YWdUZW1wbGF0ZSB0aGVuICQob3B0aW9ucy50YWdUZW1wbGF0ZSkuaHRtbCgpIGVsc2UgVGFnbGEuVEFHX1RFTVBMQVRFXG4gICAgIyBBdHRyaWJ1dGVzXG4gICAgQGRlYnVnID0gdHJ1ZVxuICAgIEBpbWFnZSA9IEB3cmFwcGVyLmZpbmQoJ2ltZycpXG4gICAgQGltYWdlTG9hZGVkID0gQGltYWdlWzBdLmNvbXBsZXRlXG4gICAgQGN1cnJlbnRXaWR0aCA9IEBpbWFnZVswXS53aWR0aFxuICAgIEBjdXJyZW50SGVpZ2h0ID0gQGltYWdlWzBdLmhlaWdodFxuXG4gIGJpbmQ6IC0+XG4gICAgQGxvZyAnYmluZCgpIGlzIGV4ZWN1dGVkJ1xuICAgICQod2luZG93KS5vbiAncmVzaXplJywgJC5wcm94eShAaGFuZGxlV2luZG93UmVzaXplLCBAKVxuXG4gIHJlbmRlcjogLT5cbiAgICAjIERlbGF5IHRvIGdldCBkaW1lbnNpb24gZmlyc3RcbiAgICB1bmxlc3MgQGltYWdlTG9hZGVkXG4gICAgICBpbWcgPSBuZXcgSW1hZ2UoKVxuICAgICAgaW1nLnNyYyA9IEBpbWFnZS5hdHRyKCdzcmMnKVxuICAgICAgJChpbWcpXG4gICAgICAgIC5vbmUgJ2xvYWQnLCAkLnByb3h5KEBoYW5kbGVJbWFnZUxvYWQsIEApXG4gICAgICAgIC5vbmUgJ2Vycm9yJywgJC5wcm94eShAaGFuZGxlSW1hZ2VFcnJvciwgQClcbiAgICAgIHJldHVyblxuXG4gICAgQGxvZyAncmVuZGVyKCkgaXMgZXhlY3V0ZWQnXG4gICAgQGFwcGVuZFRhZyB0YWcgZm9yIHRhZyBpbiBAZGF0YVxuICAgIEB3cmFwcGVyLmFkZENsYXNzICd0YWdsYSdcblxuICBkZXN0cm95OiAtPlxuICAgIEBsb2cgJ2Rlc3Ryb3koKSBpcyBleGVjdXRlZCdcblxuJC5leHRlbmQoVGFnbGE6OiwgcHJvdG8pXG53aW5kb3cuVGFnbGEgPSBUYWdsYVxuIl19