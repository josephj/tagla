(function() {
  var Tagla, proto;

  Tagla = (function() {
    function Tagla($wrapper, options) {
      if (options == null) {
        options = {};
      }
      this.wrapper = $($wrapper);
      this.init(options);
      this.bind();
    }

    return Tagla;

  })();

  Tagla.NAME = 'Tagla';

  Tagla.PREFIX = 'tagla-';

  Tagla.FORM_TEMPLATE = ['<form class="tagla-form">', '    <input type="hidden" name="x">', '    <input type="hidden" name="y">', '    <select data-placeholder="Search" type="text" name="label" class="tagla-select chosen-select" placeholder="Search">', '        <option>Frankie Issue #6</option>', '        <option>Frankie Wall Calendar 2015</option>', '        <option>Frankie A5 Daily Planner</option>', '    </select>', '</form>'].join('\n');

  Tagla.TAG_TEMPLATE = ['<div class="tagla-tag">', '    <i class="tagla-icon fs fs-tag"></i>', '    <span class="tagla-label">', '      {{label}}', '      <a href="javascript:void(0)" class="tagla-tag-link tagla-tag-edit-link">', '        <i class="fs fs-pencil"></i> Edit', '      </a>', '      <a href="javascript:void(0)" class="tagla-tag-link tagla-tag-delete-link">', '        <i class="fs fs-cross3"></i> Delete', '      </a>', '    </span>', '    <div class="tagla-dialog">', '        {{#image}}', '        <div class="tagla-dialog-image">', '          <img src="{{image}}">', '        </div>', '        {{/image}}', '        <div class="tagla-dialog-text">', '          <h2 class="tagla-dialog-title">{{label}}</h2>', '          <div class="tagla-dialog-price">{{price}}</div>', '          <p class="tagla-dialog-description">{{description}}</p>', '          <a href="{{url}}" class="tagla-dialog-button st-btn st-btn-success st-btn-solid">', '            <i class="fs fs-cart"></i>', '            Buy Now', '          </a>', '        </div>', '    </div>', "    " + Tagla.FORM_TEMPLATE, '</div>'].join('\n');

  Tagla.NEW_TAG_TEMPLATE = ['<div class="tagla-tag">', '    <i class="tagla-icon fs fs-tag"></i>', '    <span class="tagla-label">{{label}}</span>', '</div>'].join('\n');

  Tagla.DRAG_ATTR = {
    containment: '.tagla',
    handle: '.tagla-icon'
  };

  Tagla.SELECT_ATTR = {
    placeholder_text_single: 'Select an option',
    width: '310px'
  };

  proto = {
    log: function(msg, type) {
      if (type == null) {
        type = 'info';
      }
      if (!this.debug || !window.console || !window.console[type]) {
        return;
      }
      return window.console[type]("[" + Tagla.NAME + "] " + msg);
    },
    formatFloat: function(num, pos) {
      var size;
      size = Math.pow(10, pos);
      return Math.round(num * size) / size;
    },
    _setTools: function($tag) {
      var drag;
      drag = new Draggabilly($tag[0], Tagla.DRAG_ATTR);
      drag.disable();
      $tag.data('draggabilly', drag);
      return $tag.find('.tagla-select').chosen(Tagla.SELECT_ATTR);
    },
    appendTag: function(tag) {
      var $tag, offsetX, offsetY, x, y;
      this.log('appendTag() is executed');
      $tag = $(Mustache.render(this.tagTemplate, tag));
      this.wrapper.append($tag);
      tag.x = tag.x || 50;
      tag.y = tag.y || 50;
      x = this.wrapper.width() * (tag.x / 100);
      y = this.wrapper.height() * (tag.y / 100);
      offsetX = $tag.outerWidth() / 2;
      offsetY = $tag.outerHeight() / 2;
      $tag.css({
        left: (x - offsetX) + "px",
        top: (y - offsetY) + "px"
      });
      $tag.data('tag-data', tag);
      if (this.editor) {
        return this._setTools($tag);
      }
    },
    updateImageSize: function() {
      var image;
      this.log('updateImageSize() is executed');
      image = this.image[0];
      this.currentWidth = image.width;
      this.currentHeight = image.height;
      this.widthRatio = this.currentWidth / this.naturalWidth;
      return this.heightRatio = this.currentHeight / this.naturalHeight;
    },
    handleImageError: function(e) {
      this.log('handleImageError() is executed');
      this.imageLoaded = false;
      return this.destroy();
    },
    handleImageLoad: function(e) {
      this.log('handleImageLoad() is executed');
      this.imageLoaded = true;
      this.naturalWidth = this.image[0].width;
      this.naturalHeight = this.image[0].height;
      this.updateImageSize();
      return this.render();
    },
    handleTagClick: function(e) {
      var $tag;
      this.log('handleTagClick() is executed');
      e.preventDefault();
      e.stopPropagation();
      $tag = $(e.currentTarget);
      $('.tagla-tag').each(function() {
        if (this !== $tag[0]) {
          $(this).removeClass('tagla-tag-active');
          $(this).removeClass('tagla-tag-choose');
          return $(this).data('draggabilly').disable();
        }
      });
      $tag.addClass('tagla-tag-active');
      return $tag.data('draggabilly').enable();
    },
    handleTagDelete: function(e) {
      var $tag, instance;
      this.log('handleTagDelete() is executed');
      e.preventDefault();
      $tag = $(e.currentTarget).parents('.tagla-tag');
      $tag.remove();
      instance = $tag.data('draggabilly');
      if (instance) {
        instance.destroy();
      }
      return $(document).trigger('tagla:delete', $tag.data('tag-data'));
    },
    handleTagEdit: function(e) {
      var $tag;
      this.log('handleTagDelete() is executed');
      e.preventDefault();
      $tag = $(e.currentTarget).parents('.tagla-tag');
      $tag.addClass('tagla-tag-choose');
      $tag.find('.tagla-select').trigger('chosen:open');
      $tag.find('.tagla-select').on('change', function(e) {
        return $tag.removeClass('tagla-tag-choose tagla-tag-active');
      });
      return $(document).trigger('tagla:edit', $tag.data('tag-data'));
    },
    handleWrapperClick: function(e) {
      this.log('handleWrapperClick() is executed');
      return $('.tagla-tag').each(function() {
        $(this).removeClass('tagla-tag-active');
        return $(this).data('draggabilly').disable();
      });
    },
    handleWindowResize: function(e) {
      var image;
      this.log('handleImageResize() is executed');
      image = this.image[0];
      if (image.width === this.currentWidth && image.height === this.currentHeight) {
        return;
      }
      return this.updateImageSize();
    },
    edit: function() {
      if (this.editor === true) {
        return;
      }
      this.log('edit() is executed');
      this.wrapper.addClass('tagla-editing');
      $('.tagla-tag').each(function() {
        var instance;
        instance = $(this).data('draggabilly');
        if (instance) {
          return instance.enable();
        } else {
          instance = new Draggabilly(this, Tagla.DRAG_ATTR);
          return $(this).data('draggabilly', instance);
        }
      });
      return this.editor = true;
    },
    unedit: function() {
      if (this.edit === false) {
        return;
      }
      this.log('unedit() is executed');
      this.wrapper.find('.tagla-tag').each(function() {
        var instance;
        instance = $(this).data('draggabilly');
        return instance.disable();
      });
      this.wrapper.removeClass('tagla-editing');
      return this.editor = false;
    },
    addTag: function() {
      var $tag, instance, offsetX, offsetY, tag;
      if (!this.editor) {
        return;
      }
      this.log('addTag() is executed');
      $tag = $(Mustache.render(Tagla.NEW_TAG_TEMPLATE, tag));
      this.wrapper.append($tag);
      tag = {
        x: 50,
        y: 50
      };
      offsetX = this.formatFloat($tag.outerWidth() / 2 / this.wrapper.width() * 100, 2);
      offsetY = this.formatFloat($tag.outerHeight() / 2 / this.wrapper.height() * 100, 2);
      $tag.css({
        left: (tag.x - offsetX) + "%",
        top: (tag.y - offsetY) + "%"
      });
      instance = new Draggabilly($tag[0], Tagla.DRAG_ATTR);
      return $(this).data('draggabilly', instance);
    },
    deleteTag: function(e) {},
    init: function(options) {
      var _ref;
      this.data = options.data || [];
      this.editor = (_ref = options.editor === true) != null ? _ref : {
        on: false
      };
      this.form = options.form ? $(options.form) : Tagla.FORM_TEMPLATE;
      this.tagTemplate = options.tagTemplate ? $(options.tagTemplate).html() : Tagla.TAG_TEMPLATE;
      this.debug = true;
      this.image = this.wrapper.find('img');
      this.imageLoaded = this.image[0].complete;
      this.currentWidth = this.image[0].width;
      return this.currentHeight = this.image[0].height;
    },
    bind: function() {
      this.log('bind() is executed');
      this.wrapper.on('mouseenter', $.proxy(this.handleMouseEnter, this));
      this.wrapper.on('click', $.proxy(this.handleWrapperClick, this));
      this.wrapper.on('click', '.tagla-tag', $.proxy(this.handleTagClick, this));
      this.wrapper.on('click', '.tagla-tag-edit-link', $.proxy(this.handleTagEdit, this));
      this.wrapper.on('click', '.tagla-tag-delete-link', $.proxy(this.handleTagDelete, this));
      return $(window).on('resize', $.proxy(this.handleWindowResize, this));
    },
    render: function() {
      var img, tag, _i, _len, _ref;
      if (!this.imageLoaded) {
        img = new Image();
        img.src = this.image.attr('src');
        $(img).one('load', $.proxy(this.handleImageLoad, this)).one('error', $.proxy(this.handleImageError, this));
        return;
      }
      this.log('render() is executed');
      this.wrapper.addClass('tagla');
      _ref = this.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        this.appendTag(tag);
      }
      if (this.editor) {
        return this.wrapper.addClass('tagla-editing');
      }
    },
    destroy: function() {
      return this.log('destroy() is executed');
    }
  };

  $.extend(Tagla.prototype, proto);

  window.Tagla = Tagla;


  /*
        @wrapper.find('.tagla-select').each ->
          $(@).chosen
            placeholder_text_single: "Select an option"
            width: '310px'
          chosen = $(@).chosen().data('chosen')
          autoClose = false
          chosen_resultSelect_fn = chosen.result_select
          chosen.search_contains = true
          chosen.result_select = (evt) ->
            resultHighlight = null
            unless autoClose
              evt['metaKey'] = true
              evt['ctrlKey'] = true
              resultHighlight = chosen.result_highlight
            stext = chosen.get_search_text()
            result = chosen_resultSelect_fn.call(chosen, evt)
  
            if autoClose is off && resultHighlight != null
              resultHighlight.addClass('result-selected')
  
            @search_field.val(stext)
            @winnow_results()
            @search_field_scale()
            result
   */

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QUFBLE9BVkE7QUFXQSxNQUFBLElBQXFDLElBQUMsQ0FBQSxNQUF0QztlQUFBLElBQUMsQ0FBQSxPQUFPLENBQUMsUUFBVCxDQUFtQixlQUFuQixFQUFBO09BYk07SUFBQSxDQXJMUjtBQUFBLElBb01BLE9BQUEsRUFBUyxTQUFBLEdBQUE7YUFDUCxJQUFDLENBQUEsR0FBRCxDQUFNLHVCQUFOLEVBRE87SUFBQSxDQXBNVDtHQW5FRixDQUFBOztBQUFBLEVBMFFBLENBQUMsQ0FBQyxNQUFGLENBQVMsS0FBSyxDQUFBLFNBQWQsRUFBa0IsS0FBbEIsQ0ExUUEsQ0FBQTs7QUFBQSxFQTJRQSxNQUFNLENBQUMsS0FBUCxHQUFlLEtBM1FmLENBQUE7O0FBOFFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0E5UUE7QUFBQSIsImZpbGUiOiJ0YWdsYS5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFRhZ2xhXG4gIGNvbnN0cnVjdG9yOiAoJHdyYXBwZXIsIG9wdGlvbnMgPSB7fSkgLT5cbiAgICBAd3JhcHBlciA9ICQoJHdyYXBwZXIpXG4gICAgQGluaXQob3B0aW9ucylcbiAgICBAYmluZCgpXG5cblRhZ2xhLk5BTUUgPSAnVGFnbGEnXG5UYWdsYS5QUkVGSVggPSAndGFnbGEtJ1xuVGFnbGEuRk9STV9URU1QTEFURSA9IFtcbiAgJzxmb3JtIGNsYXNzPVwidGFnbGEtZm9ybVwiPidcbiAgJyAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJ4XCI+J1xuICAnICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cInlcIj4nXG4gICcgICAgPHNlbGVjdCBkYXRhLXBsYWNlaG9sZGVyPVwiU2VhcmNoXCIgdHlwZT1cInRleHRcIiBuYW1lPVwibGFiZWxcIiBjbGFzcz1cInRhZ2xhLXNlbGVjdCBjaG9zZW4tc2VsZWN0XCIgcGxhY2Vob2xkZXI9XCJTZWFyY2hcIj4nXG4gICcgICAgICAgIDxvcHRpb24+RnJhbmtpZSBJc3N1ZSAjNjwvb3B0aW9uPidcbiAgJyAgICAgICAgPG9wdGlvbj5GcmFua2llIFdhbGwgQ2FsZW5kYXIgMjAxNTwvb3B0aW9uPidcbiAgJyAgICAgICAgPG9wdGlvbj5GcmFua2llIEE1IERhaWx5IFBsYW5uZXI8L29wdGlvbj4nXG4gICcgICAgPC9zZWxlY3Q+J1xuICAnPC9mb3JtPidcbl0uam9pbignXFxuJylcblRhZ2xhLlRBR19URU1QTEFURSA9IFtcbiAgJzxkaXYgY2xhc3M9XCJ0YWdsYS10YWdcIj4nXG4gICcgICAgPGkgY2xhc3M9XCJ0YWdsYS1pY29uIGZzIGZzLXRhZ1wiPjwvaT4nXG4gICcgICAgPHNwYW4gY2xhc3M9XCJ0YWdsYS1sYWJlbFwiPidcbiAgJyAgICAgIHt7bGFiZWx9fSdcbiAgJyAgICAgIDxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBjbGFzcz1cInRhZ2xhLXRhZy1saW5rIHRhZ2xhLXRhZy1lZGl0LWxpbmtcIj4nXG4gICcgICAgICAgIDxpIGNsYXNzPVwiZnMgZnMtcGVuY2lsXCI+PC9pPiBFZGl0J1xuICAnICAgICAgPC9hPidcbiAgJyAgICAgIDxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBjbGFzcz1cInRhZ2xhLXRhZy1saW5rIHRhZ2xhLXRhZy1kZWxldGUtbGlua1wiPidcbiAgJyAgICAgICAgPGkgY2xhc3M9XCJmcyBmcy1jcm9zczNcIj48L2k+IERlbGV0ZSdcbiAgJyAgICAgIDwvYT4nXG4gICcgICAgPC9zcGFuPidcbiAgJyAgICA8ZGl2IGNsYXNzPVwidGFnbGEtZGlhbG9nXCI+J1xuICAnICAgICAgICB7eyNpbWFnZX19J1xuICAnICAgICAgICA8ZGl2IGNsYXNzPVwidGFnbGEtZGlhbG9nLWltYWdlXCI+J1xuICAnICAgICAgICAgIDxpbWcgc3JjPVwie3tpbWFnZX19XCI+J1xuICAnICAgICAgICA8L2Rpdj4nXG4gICcgICAgICAgIHt7L2ltYWdlfX0nXG4gICcgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWdsYS1kaWFsb2ctdGV4dFwiPidcbiAgJyAgICAgICAgICA8aDIgY2xhc3M9XCJ0YWdsYS1kaWFsb2ctdGl0bGVcIj57e2xhYmVsfX08L2gyPidcbiAgJyAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFnbGEtZGlhbG9nLXByaWNlXCI+e3twcmljZX19PC9kaXY+J1xuICAnICAgICAgICAgIDxwIGNsYXNzPVwidGFnbGEtZGlhbG9nLWRlc2NyaXB0aW9uXCI+e3tkZXNjcmlwdGlvbn19PC9wPidcbiAgJyAgICAgICAgICA8YSBocmVmPVwie3t1cmx9fVwiIGNsYXNzPVwidGFnbGEtZGlhbG9nLWJ1dHRvbiBzdC1idG4gc3QtYnRuLXN1Y2Nlc3Mgc3QtYnRuLXNvbGlkXCI+J1xuICAnICAgICAgICAgICAgPGkgY2xhc3M9XCJmcyBmcy1jYXJ0XCI+PC9pPidcbiAgJyAgICAgICAgICAgIEJ1eSBOb3cnXG4gICcgICAgICAgICAgPC9hPidcbiAgJyAgICAgICAgPC9kaXY+J1xuICAnICAgIDwvZGl2PidcbiAgXCIgICAgI3tUYWdsYS5GT1JNX1RFTVBMQVRFfVwiXG4gICc8L2Rpdj4nXG5dLmpvaW4oJ1xcbicpXG5UYWdsYS5ORVdfVEFHX1RFTVBMQVRFID0gW1xuICAnPGRpdiBjbGFzcz1cInRhZ2xhLXRhZ1wiPidcbiAgJyAgICA8aSBjbGFzcz1cInRhZ2xhLWljb24gZnMgZnMtdGFnXCI+PC9pPidcbiAgJyAgICA8c3BhbiBjbGFzcz1cInRhZ2xhLWxhYmVsXCI+e3tsYWJlbH19PC9zcGFuPidcbiAgJzwvZGl2Pidcbl0uam9pbignXFxuJylcblRhZ2xhLkRSQUdfQVRUUiA9XG4gIGNvbnRhaW5tZW50OiAnLnRhZ2xhJ1xuICBoYW5kbGU6ICcudGFnbGEtaWNvbidcblRhZ2xhLlNFTEVDVF9BVFRSID1cbiAgcGxhY2Vob2xkZXJfdGV4dF9zaW5nbGU6ICdTZWxlY3QgYW4gb3B0aW9uJ1xuICB3aWR0aDogJzMxMHB4J1xuXG5wcm90byA9XG4gICMjIyMjIyMjIyMjIyMjXG4gICMgVXRpbGl0aWVzXG4gICMjIyMjIyMjIyMjIyMjXG4gIGxvZzogKG1zZywgdHlwZSA9ICdpbmZvJykgLT5cbiAgICByZXR1cm4gaWYgIUBkZWJ1ZyBvciAhd2luZG93LmNvbnNvbGUgb3IgIXdpbmRvdy5jb25zb2xlW3R5cGVdXG4gICAgd2luZG93LmNvbnNvbGVbdHlwZV0gXCJbI3tUYWdsYS5OQU1FfV0gI3ttc2d9XCJcblxuICBmb3JtYXRGbG9hdDogKG51bSwgcG9zKSAtPlxuICAgIHNpemUgPSBNYXRoLnBvdygxMCwgcG9zKVxuICAgIE1hdGgucm91bmQobnVtICogc2l6ZSkgLyBzaXplXG5cbiAgIyMjIyMjIyMjIyMjIyMjIyMjXG4gICMgUHJpdmF0ZSBNZXRob2RzXG4gICMjIyMjIyMjIyMjIyMjIyMjI1xuICAjIEluaXRpYWxpemUgZHJhZyBhbmQgc2VsZWN0IGxpYnMgZm9yIGEgc2luZ2xlIHRhZ1xuICBfc2V0VG9vbHM6ICgkdGFnKSAtPlxuICAgIGRyYWcgPSBuZXcgRHJhZ2dhYmlsbHkoJHRhZ1swXSwgVGFnbGEuRFJBR19BVFRSKVxuICAgIGRyYWcuZGlzYWJsZSgpXG4gICAgJHRhZy5kYXRhKCdkcmFnZ2FiaWxseScsIGRyYWcpXG4gICAgJHRhZy5maW5kKCcudGFnbGEtc2VsZWN0JykuY2hvc2VuKFRhZ2xhLlNFTEVDVF9BVFRSKVxuXG4gICMjIyMjIyMjIyMjIyMjIyMjI1xuICAjIFB1YmxpYyBNZWh0b2RzXG4gICMjIyMjIyMjIyMjIyMjIyMjI1xuICBhcHBlbmRUYWc6ICh0YWcpIC0+XG4gICAgQGxvZyAnYXBwZW5kVGFnKCkgaXMgZXhlY3V0ZWQnXG4gICAgIyBSZW5kZXIgdGFnIGVsZW1lbnQgYnkgcHJvdmlkZWQgdGVtcGxhdGVcbiAgICAkdGFnID0gJChNdXN0YWNoZS5yZW5kZXIoQHRhZ1RlbXBsYXRlLCB0YWcpKVxuICAgIEB3cmFwcGVyLmFwcGVuZCgkdGFnKVxuICAgICMgRGVmYXVsdCBwb3NpdGlvbiBmb3IgbmV3IHRhZ1xuICAgIHRhZy54ID0gdGFnLnggfHwgNTBcbiAgICB0YWcueSA9IHRhZy55IHx8IDUwXG4gICAgIyBNYWtlIG9mZnNldCBzbyB0aGUgcG9zaXRpb24gY291bGQgYmUgY2VudGVyIHBvaW50IG9mIGljb25cbiAgICAjIFRPRE8gLSBDdXJyZW50IGNvbnZlcnQgcGVyY2VudCB0byBwaXhlbCwgc2hvdWxkIGFsbG93IHVzZXIgdG9cbiAgICAjICAgICAgICBkZWZpbmUgdGhlIHVuaXQgaW5zdGVhZCBvZiBoYXJkIGNvZGUgaXRcbiAgICB4ID0gQHdyYXBwZXIud2lkdGgoKSAqICh0YWcueCAvIDEwMClcbiAgICB5ID0gQHdyYXBwZXIuaGVpZ2h0KCkgKiAodGFnLnkgLyAxMDApXG4gICAgb2Zmc2V0WCA9ICR0YWcub3V0ZXJXaWR0aCgpIC8gMlxuICAgIG9mZnNldFkgPSAkdGFnLm91dGVySGVpZ2h0KCkgLyAyXG4gICAgJHRhZy5jc3NcbiAgICAgIGxlZnQ6IFwiI3t4IC0gb2Zmc2V0WH1weFwiXG4gICAgICB0b3A6IFwiI3t5IC0gb2Zmc2V0WX1weFwiXG4gICAgIyBTYXZlIHRhZyBkYXRhIHRvIGRhdGEgYXR0ciBmb3IgZWFzeSBhY2Nlc3NcbiAgICAkdGFnLmRhdGEoJ3RhZy1kYXRhJywgdGFnKVxuICAgICMgUmVuZGVyIHRhZyBlZGl0b3IgdG9vbHNcbiAgICBAX3NldFRvb2xzKCR0YWcpIGlmIEBlZGl0b3JcblxuICB1cGRhdGVJbWFnZVNpemU6IC0+XG4gICAgQGxvZyAndXBkYXRlSW1hZ2VTaXplKCkgaXMgZXhlY3V0ZWQnXG4gICAgaW1hZ2UgPSBAaW1hZ2VbMF1cbiAgICBAY3VycmVudFdpZHRoID0gaW1hZ2Uud2lkdGhcbiAgICBAY3VycmVudEhlaWdodCA9IGltYWdlLmhlaWdodFxuICAgIEB3aWR0aFJhdGlvID0gQGN1cnJlbnRXaWR0aCAvIEBuYXR1cmFsV2lkdGhcbiAgICBAaGVpZ2h0UmF0aW8gPSBAY3VycmVudEhlaWdodCAvIEBuYXR1cmFsSGVpZ2h0XG5cbiAgIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiAgIyBFdmVudCBIYW5kbGVyc1xuICAjIyMjIyMjIyMjIyMjIyMjIyMjI1xuICBoYW5kbGVJbWFnZUVycm9yOiAoZSkgLT5cbiAgICBAbG9nICdoYW5kbGVJbWFnZUVycm9yKCkgaXMgZXhlY3V0ZWQnXG4gICAgQGltYWdlTG9hZGVkID0gZmFsc2VcbiAgICBAZGVzdHJveSgpXG5cbiAgaGFuZGxlSW1hZ2VMb2FkOiAoZSkgLT5cbiAgICBAbG9nICdoYW5kbGVJbWFnZUxvYWQoKSBpcyBleGVjdXRlZCdcbiAgICBAaW1hZ2VMb2FkZWQgPSB0cnVlXG4gICAgQG5hdHVyYWxXaWR0aCA9IEBpbWFnZVswXS53aWR0aFxuICAgIEBuYXR1cmFsSGVpZ2h0ID0gQGltYWdlWzBdLmhlaWdodFxuICAgIEB1cGRhdGVJbWFnZVNpemUoKVxuICAgIEByZW5kZXIoKVxuXG4gIGhhbmRsZVRhZ0NsaWNrOiAoZSkgLT5cbiAgICBAbG9nICdoYW5kbGVUYWdDbGljaygpIGlzIGV4ZWN1dGVkJ1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAkdGFnID0gJChlLmN1cnJlbnRUYXJnZXQpXG4gICAgJCgnLnRhZ2xhLXRhZycpLmVhY2ggLT5cbiAgICAgIGlmIEAgaXNudCAkdGFnWzBdXG4gICAgICAgICQoQCkucmVtb3ZlQ2xhc3MoJ3RhZ2xhLXRhZy1hY3RpdmUnKVxuICAgICAgICAkKEApLnJlbW92ZUNsYXNzKCd0YWdsYS10YWctY2hvb3NlJylcbiAgICAgICAgJChAKS5kYXRhKCdkcmFnZ2FiaWxseScpLmRpc2FibGUoKVxuICAgICAgICAjJChAKS5maW5kKCcudGFnbGEtc2VsZWN0JykudHJpZ2dlcignY2hvc2VuOm9wZW4nKVxuICAgICR0YWcuYWRkQ2xhc3MoJ3RhZ2xhLXRhZy1hY3RpdmUnKVxuICAgICR0YWcuZGF0YSgnZHJhZ2dhYmlsbHknKS5lbmFibGUoKVxuXG4gIGhhbmRsZVRhZ0RlbGV0ZTogKGUpIC0+XG4gICAgQGxvZyAnaGFuZGxlVGFnRGVsZXRlKCkgaXMgZXhlY3V0ZWQnXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgJHRhZyA9ICQoZS5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcudGFnbGEtdGFnJylcbiAgICAkdGFnLnJlbW92ZSgpXG4gICAgaW5zdGFuY2UgPSAkdGFnLmRhdGEoJ2RyYWdnYWJpbGx5JylcbiAgICBpbnN0YW5jZS5kZXN0cm95KCkgaWYgKGluc3RhbmNlKVxuICAgICQoZG9jdW1lbnQpLnRyaWdnZXIoJ3RhZ2xhOmRlbGV0ZScsICR0YWcuZGF0YSgndGFnLWRhdGEnKSlcblxuICBoYW5kbGVUYWdFZGl0OiAoZSkgLT5cbiAgICBAbG9nICdoYW5kbGVUYWdEZWxldGUoKSBpcyBleGVjdXRlZCdcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAkdGFnID0gJChlLmN1cnJlbnRUYXJnZXQpLnBhcmVudHMoJy50YWdsYS10YWcnKVxuICAgICR0YWcuYWRkQ2xhc3MoJ3RhZ2xhLXRhZy1jaG9vc2UnKVxuICAgICR0YWcuZmluZCgnLnRhZ2xhLXNlbGVjdCcpLnRyaWdnZXIoJ2Nob3NlbjpvcGVuJylcbiAgICAkdGFnLmZpbmQoJy50YWdsYS1zZWxlY3QnKS5vbiAnY2hhbmdlJywgKGUpIC0+XG4gICAgICAkdGFnLnJlbW92ZUNsYXNzKCd0YWdsYS10YWctY2hvb3NlIHRhZ2xhLXRhZy1hY3RpdmUnKVxuICAgICQoZG9jdW1lbnQpLnRyaWdnZXIoJ3RhZ2xhOmVkaXQnLCAkdGFnLmRhdGEoJ3RhZy1kYXRhJykpXG5cbiAgaGFuZGxlV3JhcHBlckNsaWNrOiAoZSkgLT5cbiAgICBAbG9nICdoYW5kbGVXcmFwcGVyQ2xpY2soKSBpcyBleGVjdXRlZCdcbiAgICAkKCcudGFnbGEtdGFnJykuZWFjaCAtPlxuICAgICAgJChAKS5yZW1vdmVDbGFzcygndGFnbGEtdGFnLWFjdGl2ZScpXG4gICAgICAkKEApLmRhdGEoJ2RyYWdnYWJpbGx5JykuZGlzYWJsZSgpXG5cbiAgaGFuZGxlV2luZG93UmVzaXplOiAoZSkgLT5cbiAgICBAbG9nICdoYW5kbGVJbWFnZVJlc2l6ZSgpIGlzIGV4ZWN1dGVkJ1xuICAgIGltYWdlID0gQGltYWdlWzBdXG4gICAgcmV0dXJuIGlmIGltYWdlLndpZHRoIGlzIEBjdXJyZW50V2lkdGggYW5kIGltYWdlLmhlaWdodCBpcyBAY3VycmVudEhlaWdodFxuICAgIEB1cGRhdGVJbWFnZVNpemUoKVxuXG4gICMjIyMjIyMjIyMjIyMjIyMjIyMjXG4gICMgUHVibGljIE1ldGhvZHNcbiAgIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiAgZWRpdDogLT5cbiAgICByZXR1cm4gaWYgQGVkaXRvciBpcyBvblxuICAgIEBsb2cgJ2VkaXQoKSBpcyBleGVjdXRlZCdcbiAgICBAd3JhcHBlci5hZGRDbGFzcygndGFnbGEtZWRpdGluZycpXG4gICAgJCgnLnRhZ2xhLXRhZycpLmVhY2ggLT5cbiAgICAgIGluc3RhbmNlID0gJChAKS5kYXRhKCdkcmFnZ2FiaWxseScpXG4gICAgICBpZiBpbnN0YW5jZVxuICAgICAgICBpbnN0YW5jZS5lbmFibGUoKVxuICAgICAgZWxzZVxuICAgICAgICBpbnN0YW5jZSA9IG5ldyBEcmFnZ2FiaWxseShALCBUYWdsYS5EUkFHX0FUVFIpXG4gICAgICAgICQoQCkuZGF0YSgnZHJhZ2dhYmlsbHknLCBpbnN0YW5jZSlcbiAgICBAZWRpdG9yID0gb25cblxuICB1bmVkaXQ6IC0+XG4gICAgcmV0dXJuIGlmIEBlZGl0IGlzIG9mZlxuICAgIEBsb2cgJ3VuZWRpdCgpIGlzIGV4ZWN1dGVkJ1xuICAgIEB3cmFwcGVyLmZpbmQoJy50YWdsYS10YWcnKS5lYWNoIC0+XG4gICAgICBpbnN0YW5jZSA9ICQoQCkuZGF0YSgnZHJhZ2dhYmlsbHknKVxuICAgICAgaW5zdGFuY2UuZGlzYWJsZSgpXG4gICAgQHdyYXBwZXIucmVtb3ZlQ2xhc3MoJ3RhZ2xhLWVkaXRpbmcnKVxuICAgIEBlZGl0b3IgPSBvZmZcblxuICAjIEFwcGVuZCBhIG5ldyB0YWcgdG8gcGFnZVxuICBhZGRUYWc6IC0+XG4gICAgcmV0dXJuIHVubGVzcyBAZWRpdG9yICMgT25seSBmb3IgZWRpdG9yIG1vZGVcbiAgICBAbG9nICdhZGRUYWcoKSBpcyBleGVjdXRlZCdcbiAgICAkdGFnID0gJChNdXN0YWNoZS5yZW5kZXIoVGFnbGEuTkVXX1RBR19URU1QTEFURSwgdGFnKSlcbiAgICBAd3JhcHBlci5hcHBlbmQoJHRhZylcbiAgICB0YWcgPSB4OiA1MCwgeTogNTBcbiAgICBvZmZzZXRYID0gQGZvcm1hdEZsb2F0KCR0YWcub3V0ZXJXaWR0aCgpIC8gMiAvIEB3cmFwcGVyLndpZHRoKCkgKiAxMDAsIDIpXG4gICAgb2Zmc2V0WSA9IEBmb3JtYXRGbG9hdCgkdGFnLm91dGVySGVpZ2h0KCkgLyAyIC8gQHdyYXBwZXIuaGVpZ2h0KCkgKiAxMDAsIDIpXG4gICAgJHRhZy5jc3NcbiAgICAgIGxlZnQ6IFwiI3t0YWcueCAtIG9mZnNldFh9JVwiXG4gICAgICB0b3A6IFwiI3t0YWcueSAtIG9mZnNldFl9JVwiXG4gICAgaW5zdGFuY2UgPSBuZXcgRHJhZ2dhYmlsbHkoJHRhZ1swXSwgVGFnbGEuRFJBR19BVFRSKVxuICAgICQoQCkuZGF0YSgnZHJhZ2dhYmlsbHknLCBpbnN0YW5jZSlcblxuICBkZWxldGVUYWc6IChlKSAtPlxuXG5cbiAgIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiAgIyBMaWZlY3ljbGUgTWV0aG9kc1xuICAjIyMjIyMjIyMjIyMjIyMjIyMjI1xuICBpbml0OiAob3B0aW9ucykgLT5cbiAgICAjIENvbmZpZ3VyZSBPcHRpb25zXG4gICAgQGRhdGEgPSBvcHRpb25zLmRhdGEgfHwgW11cbiAgICBAZWRpdG9yID0gKG9wdGlvbnMuZWRpdG9yIGlzIG9uKSA/IG9uIDogZmFsc2VcbiAgICBAZm9ybSA9IGlmIG9wdGlvbnMuZm9ybSB0aGVuICQob3B0aW9ucy5mb3JtKSBlbHNlIFRhZ2xhLkZPUk1fVEVNUExBVEVcbiAgICBAdGFnVGVtcGxhdGUgPSBpZiBvcHRpb25zLnRhZ1RlbXBsYXRlIHRoZW4gJChvcHRpb25zLnRhZ1RlbXBsYXRlKS5odG1sKCkgZWxzZSBUYWdsYS5UQUdfVEVNUExBVEVcbiAgICAjIEF0dHJpYnV0ZXNcbiAgICBAZGVidWcgPSB0cnVlXG4gICAgQGltYWdlID0gQHdyYXBwZXIuZmluZCgnaW1nJylcbiAgICBAaW1hZ2VMb2FkZWQgPSBAaW1hZ2VbMF0uY29tcGxldGVcbiAgICBAY3VycmVudFdpZHRoID0gQGltYWdlWzBdLndpZHRoXG4gICAgQGN1cnJlbnRIZWlnaHQgPSBAaW1hZ2VbMF0uaGVpZ2h0XG5cbiAgYmluZDogLT5cbiAgICBAbG9nICdiaW5kKCkgaXMgZXhlY3V0ZWQnXG4gICAgQHdyYXBwZXIub24gJ21vdXNlZW50ZXInLCAkLnByb3h5KEBoYW5kbGVNb3VzZUVudGVyLCBAKVxuICAgIEB3cmFwcGVyLm9uICdjbGljaycsICQucHJveHkoQGhhbmRsZVdyYXBwZXJDbGljaywgQClcbiAgICBAd3JhcHBlci5vbiAnY2xpY2snLCAnLnRhZ2xhLXRhZycsICQucHJveHkoQGhhbmRsZVRhZ0NsaWNrLCBAKVxuICAgIEB3cmFwcGVyLm9uICdjbGljaycsICcudGFnbGEtdGFnLWVkaXQtbGluaycsICQucHJveHkoQGhhbmRsZVRhZ0VkaXQsIEApXG4gICAgQHdyYXBwZXIub24gJ2NsaWNrJywgJy50YWdsYS10YWctZGVsZXRlLWxpbmsnLCAkLnByb3h5KEBoYW5kbGVUYWdEZWxldGUsIEApXG4gICAgJCh3aW5kb3cpLm9uICdyZXNpemUnLCAkLnByb3h5KEBoYW5kbGVXaW5kb3dSZXNpemUsIEApXG5cbiAgcmVuZGVyOiAtPlxuICAgICMgRGVsYXkgdG8gZ2V0IGRpbWVuc2lvbiBmaXJzdFxuICAgIHVubGVzcyBAaW1hZ2VMb2FkZWRcbiAgICAgIGltZyA9IG5ldyBJbWFnZSgpXG4gICAgICBpbWcuc3JjID0gQGltYWdlLmF0dHIoJ3NyYycpXG4gICAgICAkKGltZylcbiAgICAgICAgLm9uZSAnbG9hZCcsICQucHJveHkoQGhhbmRsZUltYWdlTG9hZCwgQClcbiAgICAgICAgLm9uZSAnZXJyb3InLCAkLnByb3h5KEBoYW5kbGVJbWFnZUVycm9yLCBAKVxuICAgICAgcmV0dXJuXG5cbiAgICBAbG9nICdyZW5kZXIoKSBpcyBleGVjdXRlZCdcbiAgICBAd3JhcHBlci5hZGRDbGFzcyAndGFnbGEnXG4gICAgQGFwcGVuZFRhZyB0YWcgZm9yIHRhZyBpbiBAZGF0YVxuICAgIEB3cmFwcGVyLmFkZENsYXNzICd0YWdsYS1lZGl0aW5nJyBpZiBAZWRpdG9yXG5cbiAgZGVzdHJveTogLT5cbiAgICBAbG9nICdkZXN0cm95KCkgaXMgZXhlY3V0ZWQnXG5cbiQuZXh0ZW5kKFRhZ2xhOjosIHByb3RvKVxud2luZG93LlRhZ2xhID0gVGFnbGFcblxuXG4jIyNcbiAgICAgIEB3cmFwcGVyLmZpbmQoJy50YWdsYS1zZWxlY3QnKS5lYWNoIC0+XG4gICAgICAgICQoQCkuY2hvc2VuXG4gICAgICAgICAgcGxhY2Vob2xkZXJfdGV4dF9zaW5nbGU6IFwiU2VsZWN0IGFuIG9wdGlvblwiXG4gICAgICAgICAgd2lkdGg6ICczMTBweCdcbiAgICAgICAgY2hvc2VuID0gJChAKS5jaG9zZW4oKS5kYXRhKCdjaG9zZW4nKVxuICAgICAgICBhdXRvQ2xvc2UgPSBmYWxzZVxuICAgICAgICBjaG9zZW5fcmVzdWx0U2VsZWN0X2ZuID0gY2hvc2VuLnJlc3VsdF9zZWxlY3RcbiAgICAgICAgY2hvc2VuLnNlYXJjaF9jb250YWlucyA9IHRydWVcbiAgICAgICAgY2hvc2VuLnJlc3VsdF9zZWxlY3QgPSAoZXZ0KSAtPlxuICAgICAgICAgIHJlc3VsdEhpZ2hsaWdodCA9IG51bGxcbiAgICAgICAgICB1bmxlc3MgYXV0b0Nsb3NlXG4gICAgICAgICAgICBldnRbJ21ldGFLZXknXSA9IHRydWVcbiAgICAgICAgICAgIGV2dFsnY3RybEtleSddID0gdHJ1ZVxuICAgICAgICAgICAgcmVzdWx0SGlnaGxpZ2h0ID0gY2hvc2VuLnJlc3VsdF9oaWdobGlnaHRcbiAgICAgICAgICBzdGV4dCA9IGNob3Nlbi5nZXRfc2VhcmNoX3RleHQoKVxuICAgICAgICAgIHJlc3VsdCA9IGNob3Nlbl9yZXN1bHRTZWxlY3RfZm4uY2FsbChjaG9zZW4sIGV2dClcblxuICAgICAgICAgIGlmIGF1dG9DbG9zZSBpcyBvZmYgJiYgcmVzdWx0SGlnaGxpZ2h0ICE9IG51bGxcbiAgICAgICAgICAgIHJlc3VsdEhpZ2hsaWdodC5hZGRDbGFzcygncmVzdWx0LXNlbGVjdGVkJylcblxuICAgICAgICAgIEBzZWFyY2hfZmllbGQudmFsKHN0ZXh0KVxuICAgICAgICAgIEB3aW5ub3dfcmVzdWx0cygpXG4gICAgICAgICAgQHNlYXJjaF9maWVsZF9zY2FsZSgpXG4gICAgICAgICAgcmVzdWx0XG4jIyNcbiJdfQ==