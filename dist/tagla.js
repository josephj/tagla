(function() {
  var Tagla, proto;

  Tagla = (function() {
    function Tagla($wrapper, options) {
      if (options == null) {
        options = {};
      }
      this.wrapper = $($wrapper);
      this.init(options);
      this.bind();
    }

    return Tagla;

  })();

  Tagla.NAME = 'Tagla';

  Tagla.PREFIX = 'tagla-';

  Tagla.FORM_TEMPLATE = ['<form class="photo-tags-form photo-tags-form-hide">', '     <input type="hidden" name="x">', '     <input type="hidden" name="y">', '     <label class="photo-tags-form-label">', '         <select data-placeholder="Choose tags..." type="text" name="label" class="tagla-form-input chosen-select">', '             <option>Frankie Issue #6</option>', '             <option>Frankie Wall Calendar 2015</option>', '             <option>Frankie A5 Daily Planner</option>', '         </select>', '     </label>', '     <button type="submit" class="photo-tags-form-button">Save</button>', '     <button type="reset" class="photo-tags-form-button">Cancel</button>', '</form>'].join('\n');

  Tagla.TAG_TEMPLATE = ['<div class="tagla-tag">', '    <i class="tagla-icon fs fs-tag"></i>', '    <span class="tagla-label">', '      {{label}}', '      <a href="javascript:void(0)" class="tagla-tag-link tagla-tag-edit-link">', '        <i class="fs fs-pencil"></i> Edit', '      </a>', '      <a href="javascript:void(0)" class="tagla-tag-link tagla-tag-delete-link">', '        <i class="fs fs-cross3"></i> Delete', '      </a>', '    </span>', '    <div class="tagla-dialog">', '        {{#image}}', '        <div class="tagla-dialog-image">', '          <img src="{{image}}">', '        </div>', '        {{/image}}', '        <div class="tagla-dialog-text">', '          <h2 class="tagla-dialog-title">{{label}}</h2>', '          <div class="tagla-dialog-price">{{price}}</div>', '          <p class="tagla-dialog-description">{{description}}</p>', '          <a href="{{url}}" class="tagla-dialog-button st-btn st-btn-success st-btn-solid">', '            <i class="fs fs-cart"></i>', '            Buy Now', '          </a>', '        </div>', '    </div>', '</div>'].join('\n');

  Tagla.NEW_TAG_TEMPLATE = ['<div class="tagla-tag">', '    <i class="tagla-icon fs fs-tag"></i>', '    <span class="tagla-label">{{label}}</span>', '</div>'].join('\n');

  proto = {
    log: function(msg, type) {
      if (type == null) {
        type = 'info';
      }
      if (!this.debug || !window.console || !window.console[type]) {
        return;
      }
      return window.console[type]("[" + Tagla.NAME + "] " + msg);
    },
    formatFloat: function(num, pos) {
      var size;
      size = Math.pow(10, pos);
      return Math.round(num * size) / size;
    },
    appendTag: function(tag) {
      var $tag, offsetX, offsetY;
      this.log('appendTag() is executed');
      $tag = $(Mustache.render(this.tagTemplate, tag));
      this.wrapper.append($tag);
      offsetX = this.formatFloat($tag.outerWidth() / 2 / this.wrapper.width() * 100, 2);
      offsetY = this.formatFloat($tag.outerHeight() / 2 / this.wrapper.height() * 100, 2);
      return setTimeout(function() {
        return $tag.css({
          left: (tag.x - offsetX) + "%",
          top: (tag.y - offsetY) + "%"
        }, 500);
      });
    },
    updateImageSize: function() {
      var image;
      this.log('updateImageSize() is executed');
      image = this.image[0];
      this.currentWidth = image.width;
      this.currentHeight = image.height;
      this.widthRatio = this.currentWidth / this.naturalWidth;
      return this.heightRatio = this.currentHeight / this.naturalHeight;
    },
    handleImageError: function(e) {
      this.log('handleImageError() is executed');
      this.imageLoaded = false;
      return this.destroy();
    },
    handleImageLoad: function(e) {
      this.log('handleImageLoad() is executed');
      this.imageLoaded = true;
      this.naturalWidth = this.image[0].width;
      this.naturalHeight = this.image[0].height;
      this.updateImageSize();
      return this.render();
    },
    handleTagDelete: function(e) {
      var $tag, instance;
      this.log('handleTagDelete() is executed');
      e.preventDefault();
      $tag = $(e.currentTarget).parents('.tagla-tag');
      $tag.remove();
      instance = $tag.data('tagla-instance');
      if (instance) {
        return instance.destroy();
      }
    },
    handleWindowResize: function(e) {
      var image;
      this.log('handleImageResize() is executed');
      image = this.image[0];
      if (image.width === this.currentWidth && image.height === this.currentHeight) {
        return;
      }
      return this.updateImageSize();
    },
    edit: function() {
      if (this.editor === true) {
        return;
      }
      this.log('edit() is executed');
      this.wrapper.addClass('tagla-editing');
      $('.tagla-tag').each(function() {
        var instance;
        instance = $(this).data('tagla-instance');
        if (instance) {
          return instance.enable();
        } else {
          instance = new Draggabilly(this, {
            containment: '.tagla'
          });
          return $(this).data('tagla-instance', instance);
        }
      });
      return this.editor = true;
    },
    unedit: function() {
      if (this.edit === false) {
        return;
      }
      this.log('unedit() is executed');
      this.wrapper.find('.tagla-tag').each(function() {
        var instance;
        instance = $(this).data('tagla-instance');
        return instance.disable();
      });
      this.wrapper.removeClass('tagla-editing');
      return this.editor = false;
    },
    addTag: function() {
      var $tag, instance, offsetX, offsetY, tag;
      if (!this.editor) {
        return;
      }
      this.log('addTag() is executed');
      $tag = $(Mustache.render(Tagla.NEW_TAG_TEMPLATE, tag));
      this.wrapper.append($tag);
      tag = {
        x: 50,
        y: 50
      };
      offsetX = this.formatFloat($tag.outerWidth() / 2 / this.wrapper.width() * 100, 2);
      offsetY = this.formatFloat($tag.outerHeight() / 2 / this.wrapper.height() * 100, 2);
      $tag.css({
        left: (tag.x - offsetX) + "%",
        top: (tag.y - offsetY) + "%"
      });
      instance = new Draggabilly($tag[0], {
        containment: '.tagla'
      });
      return $(this).data('tagla-instance', instance);
    },
    deleteTag: function(e) {},
    init: function(options) {
      var _ref;
      this.data = options.data || [];
      this.editor = (_ref = options.editor === true) != null ? _ref : {
        on: false
      };
      this.form = options.form ? $(options.form) : Tagla.FORM_TEMPLATE;
      this.tagTemplate = options.tagTemplate ? $(options.tagTemplate).html() : Tagla.TAG_TEMPLATE;
      this.debug = true;
      this.image = this.wrapper.find('img');
      this.imageLoaded = this.image[0].complete;
      this.currentWidth = this.image[0].width;
      return this.currentHeight = this.image[0].height;
    },
    bind: function() {
      this.log('bind() is executed');
      this.wrapper.on('mouseenter', $.proxy(this.handleMouseEnter, this));
      this.wrapper.on('mouseenter', $.proxy(this.handleMouseEnter, this));
      this.wrapper.on('click', '.tagla-tag-delete-link', $.proxy(this.handleTagDelete, this));
      return $(window).on('resize', $.proxy(this.handleWindowResize, this));
    },
    render: function() {
      var img, tag, _i, _len, _ref;
      if (!this.imageLoaded) {
        img = new Image();
        img.src = this.image.attr('src');
        $(img).one('load', $.proxy(this.handleImageLoad, this)).one('error', $.proxy(this.handleImageError, this));
        return;
      }
      this.log('render() is executed');
      _ref = this.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        this.appendTag(tag);
      }
      return this.wrapper.addClass('tagla');
    },
    destroy: function() {
      return this.log('destroy() is executed');
    }
  };

  $.extend(Tagla.prototype, proto);

  window.Tagla = Tagla;

}).call(this);

//# sourceMappingURL=data:application/json;base64,