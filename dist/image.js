(function() {
  var ImageSize,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  ImageSize = (function(_super) {
    __extends(ImageSize, _super);

    function ImageSize(el, callback) {
      var img;
      ImageSize.__super__.constructor.call(this);
      this.el = $(el)[0];
      this.complete = this.el.complete;
      this.data = {
        width: this.el.width,
        height: this.el.height,
        naturalWidth: null,
        naturalHeight: null
      };
      this._timer = null;
      if (this.complete) {
        img = new Image();
        img.src = this.el.src;
        $.extend(this.data, {
          naturalWidth: img.width,
          naturalHeight: img.height
        });
        callback(true, this.data);
      } else {
        img = new Image();
        img.src = this.el.src;
        img.onload = function(e) {
          img = e.target;
          $.extend(this.data, {
            naturalWidth: img.width,
            naturalHeight: img.height
          });
          return callback(true, this.data);
        };
        img.onerror = function(e) {
          return callback(false, this.data);
        };
      }
      $(window).resize((function(_this) {
        return function(e) {
          if (_this._timer) {
            window.clearTimeout(_this._timer);
          }
          return _this._timer = window.setTimeout(function() {
            var isEqual;
            isEqual = _this.el.width === _this.data.width && _this.el.height === _this.data.height;
            if (isEqual) {
              return;
            }
            $.extend(_this.data, {
              width: _this.el.width,
              height: _this.el.height,
              widthRatio: _this.el.width / _this.data.naturalWidth,
              heightRatio: _this.el.height / _this.data.naturalHeight
            });
            _this.emit('change', [_this.data]);
            return _this._timer = null;
          }, 100);
        };
      })(this));
      return this;
    }

    return ImageSize;

  })(Stackla.Base);

  if (!window.Stackla) {
    window.Stackla = {};
  }

  Stackla.getImageSize = function(el, callback) {
    return new ImageSize(el, callback);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QUFBLElBQVUsT0FBVjtBQUFBLG9CQUFBLENBQUE7YUFEQTtBQUFBLFlBRUEsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxLQUFDLENBQUEsSUFBVixFQUFnQjtBQUFBLGNBQ2QsS0FBQSxFQUFPLEtBQUMsQ0FBQSxFQUFFLENBQUMsS0FERztBQUFBLGNBRWQsTUFBQSxFQUFRLEtBQUMsQ0FBQSxFQUFFLENBQUMsTUFGRTtBQUFBLGNBR2QsVUFBQSxFQUFZLEtBQUMsQ0FBQSxFQUFFLENBQUMsS0FBSixHQUFZLEtBQUMsQ0FBQSxJQUFJLENBQUMsWUFIaEI7QUFBQSxjQUlkLFdBQUEsRUFBYSxLQUFDLENBQUEsRUFBRSxDQUFDLE1BQUosR0FBYSxLQUFDLENBQUEsSUFBSSxDQUFDLGFBSmxCO2FBQWhCLENBRkEsQ0FBQTtBQUFBLFlBUUEsS0FBQyxDQUFDLElBQUYsQ0FBUSxRQUFSLEVBQWlCLENBQUMsS0FBQyxDQUFBLElBQUYsQ0FBakIsQ0FSQSxDQUFBO21CQVNBLEtBQUMsQ0FBQSxNQUFELEdBQVUsS0FWZ0I7VUFBQSxDQUFsQixFQVdSLEdBWFEsRUFGSztRQUFBLEVBQUE7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWpCLENBM0JBLENBQUE7QUEwQ0EsYUFBTyxJQUFQLENBM0NXO0lBQUEsQ0FBYjs7cUJBQUE7O0tBRHNCLE9BQU8sQ0FBQyxLQUFoQyxDQUFBOztBQThDQSxFQUFBLElBQUEsQ0FBQSxNQUFpQyxDQUFDLE9BQWxDO0FBQUEsSUFBQSxNQUFNLENBQUMsT0FBUCxHQUFpQixFQUFqQixDQUFBO0dBOUNBOztBQUFBLEVBK0NBLE9BQU8sQ0FBQyxZQUFSLEdBQXVCLFNBQUMsRUFBRCxFQUFLLFFBQUwsR0FBQTtXQUFzQixJQUFBLFNBQUEsQ0FBVSxFQUFWLEVBQWMsUUFBZCxFQUF0QjtFQUFBLENBL0N2QixDQUFBO0FBQUEiLCJmaWxlIjoiaW1hZ2UuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBJbWFnZVNpemUgZXh0ZW5kcyBTdGFja2xhLkJhc2VcbiAgY29uc3RydWN0b3I6IChlbCwgY2FsbGJhY2spIC0+XG4gICAgc3VwZXIoKVxuICAgIEBlbCA9ICQoZWwpWzBdXG4gICAgQGNvbXBsZXRlID0gQGVsLmNvbXBsZXRlXG4gICAgQGRhdGEgPVxuICAgICAgd2lkdGg6IEBlbC53aWR0aFxuICAgICAgaGVpZ2h0OiBAZWwuaGVpZ2h0XG4gICAgICBuYXR1cmFsV2lkdGg6IG51bGxcbiAgICAgIG5hdHVyYWxIZWlnaHQ6IG51bGxcbiAgICBAX3RpbWVyID0gbnVsbFxuICAgICMgSW1hZ2UgTG9hZGVkXG4gICAgaWYgQGNvbXBsZXRlXG4gICAgICBpbWcgPSBuZXcgSW1hZ2UoKVxuICAgICAgaW1nLnNyYyA9IEBlbC5zcmNcbiAgICAgICQuZXh0ZW5kIEBkYXRhLCB7bmF0dXJhbFdpZHRoOiBpbWcud2lkdGgsIG5hdHVyYWxIZWlnaHQ6IGltZy5oZWlnaHR9XG4gICAgICBjYWxsYmFjayh0cnVlLCBAZGF0YSlcbiAgICAjIEltYWdlIExvYWRpbmdcbiAgICBlbHNlXG4gICAgICBpbWcgPSBuZXcgSW1hZ2UoKVxuICAgICAgaW1nLnNyYyA9IEBlbC5zcmNcbiAgICAgIGltZy5vbmxvYWQgPSAoZSkgLT5cbiAgICAgICAgaW1nID0gZS50YXJnZXRcbiAgICAgICAgJC5leHRlbmQgQGRhdGEsIHtuYXR1cmFsV2lkdGg6IGltZy53aWR0aCwgbmF0dXJhbEhlaWdodDogaW1nLmhlaWdodH1cbiAgICAgICAgY2FsbGJhY2sodHJ1ZSwgQGRhdGEpXG4gICAgICBpbWcub25lcnJvciA9IChlKSAtPlxuICAgICAgICBjYWxsYmFjayhmYWxzZSwgQGRhdGEpXG5cbiAgICAjIEtlZXAgYW4gZXllIG9uIHJlc2l6ZSBldmVudFxuICAgICQod2luZG93KS5yZXNpemUgKGUpID0+XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KEBfdGltZXIpIGlmIEBfdGltZXJcbiAgICAgIEBfdGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCA9PlxuICAgICAgICBpc0VxdWFsID0gQGVsLndpZHRoIGlzIEBkYXRhLndpZHRoIGFuZCBAZWwuaGVpZ2h0IGlzIEBkYXRhLmhlaWdodFxuICAgICAgICByZXR1cm4gaWYgaXNFcXVhbFxuICAgICAgICAkLmV4dGVuZCBAZGF0YSwge1xuICAgICAgICAgIHdpZHRoOiBAZWwud2lkdGhcbiAgICAgICAgICBoZWlnaHQ6IEBlbC5oZWlnaHRcbiAgICAgICAgICB3aWR0aFJhdGlvOiBAZWwud2lkdGggLyBAZGF0YS5uYXR1cmFsV2lkdGhcbiAgICAgICAgICBoZWlnaHRSYXRpbzogQGVsLmhlaWdodCAvIEBkYXRhLm5hdHVyYWxIZWlnaHRcbiAgICAgICAgfVxuICAgICAgICBALmVtaXQoJ2NoYW5nZScsIFtAZGF0YV0pXG4gICAgICAgIEBfdGltZXIgPSBudWxsXG4gICAgICAsIDEwMFxuXG4gICAgcmV0dXJuIEBcblxud2luZG93LlN0YWNrbGEgPSB7fSB1bmxlc3Mgd2luZG93LlN0YWNrbGFcblN0YWNrbGEuZ2V0SW1hZ2VTaXplID0gKGVsLCBjYWxsYmFjaykgLT4gbmV3IEltYWdlU2l6ZShlbCwgY2FsbGJhY2spXG4iXX0=